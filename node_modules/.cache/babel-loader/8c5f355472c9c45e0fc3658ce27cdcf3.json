{"ast":null,"code":"var _jsxFileName = \"/home/luong/kobuki_web/src/components/Map/Map.js\";\nimport React, { Component } from \"react\";\nimport { Container, Card, Button } from \"react-bootstrap\";\nimport ROSLIB from \"roslib\";\nimport Nav2d from \"react-nav2djs/lib\";\nimport \"./Map.css\";\nimport \"../CommonStyle.css\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.ros = props.ros || null;\n    this.state = {\n      command: 'none',\n      message: 'Robot is ready !',\n      stationName: 'NoName',\n      enableCancel: false,\n      stations: []\n    };\n    this.onAddStation = this.onAddStation.bind(this);\n    this.onClickStation = this.onClickStation.bind(this);\n    this.onSetGoal = this.onSetGoal.bind(this);\n    this.actionClient = null;\n    this.InsertStationService = null;\n    this.DeleteStationService = null;\n    this.GetStationService = null;\n  }\n\n  componentDidMount() {\n    if (this.props.ros != null) {\n      this.ros = this.props.ros;\n      var serverName = this.props.serverName || '/move_base';\n      var actionName = this.props.actionName || 'move_base_msgs/MoveBaseAction';\n      this.actionClient = new ROSLIB.ActionClient({\n        ros: this.ros,\n        actionName: actionName,\n        serverName: serverName\n      });\n      this.InsertStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/add_station',\n        serviceType: 'kobuki_ui/AddStation'\n      });\n      this.DeleteStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/delete_station',\n        serviceType: 'kobuki_ui/DeleteStation'\n      });\n      this.GetStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/get_station_list',\n        serviceType: 'kobuki_ui/GetStationList'\n      });\n      this.GetStationService.callService(null, res => {\n        this.setState({\n          stations: res.station_list\n        });\n      });\n    }\n  }\n\n  onAddStation(newStation) {\n    if (newStation) {\n      var stationList = this.state.stations;\n      stationList.push(newStation);\n      this.setState({\n        stations: stationList\n      });\n      console.log(\"added new station\", newStation.name);\n      var request = new ROSLIB.ServiceRequest({\n        name: newStation.name,\n        positionX: newStation.positionX,\n        positionY: newStation.positionY,\n        positionZ: newStation.positionZ,\n        orientationX: newStation.orientationX,\n        orientationY: newStation.orientationY,\n        orientationZ: newStation.orientationZ,\n        orientationW: newStation.orientationW,\n        id: newStation.id\n      });\n      this.InsertStationService.callService(request);\n    }\n  }\n\n  onClickStation(stationId) {\n    var targetIndex = -1;\n    this.state.stations.forEach((item, index) => {\n      if (item.id == stationId) {\n        targetIndex = index;\n      }\n    });\n\n    if (targetIndex >= 0) {\n      if (this.state.command == 'DeleteStation') {\n        console.log(\"remove station\", this.state.stations[targetIndex].name);\n        var request = new ROSLIB.ServiceRequest({\n          id: this.state.stations[targetIndex].id\n        });\n        this.DeleteStationService.callService(request);\n        var stationList = this.state.stations;\n        stationList.splice(targetIndex, 1);\n        this.setState({\n          stations: stationList\n        });\n      } else {\n        console.log(\"Go to station\", this.state.stations[targetIndex].name);\n        this.setState({\n          message: 'Robot is moving to station ' + this.state.stations[targetIndex].name,\n          enableCancel: true,\n          command: 'CancelGoal'\n        });\n        var positionVec3 = new ROSLIB.Vector3(null);\n        var orientation = new ROSLIB.Quaternion({\n          x: this.state.stations[targetIndex].orientationX,\n          y: this.state.stations[targetIndex].orientationY,\n          z: this.state.stations[targetIndex].orientationZ,\n          w: this.state.stations[targetIndex].orientationW\n        });\n        positionVec3.x = this.state.stations[targetIndex].positionX;\n        positionVec3.y = this.state.stations[targetIndex].positionY;\n        var pose = new ROSLIB.Pose({\n          position: positionVec3,\n          orientation: orientation\n        });\n        var goal = new ROSLIB.Goal({\n          actionClient: this.actionClient,\n          goalMessage: {\n            target_pose: {\n              header: {\n                frame_id: 'map'\n              },\n              pose: pose\n            }\n          }\n        });\n        goal.send();\n      }\n    }\n  }\n\n  onSetGoal(obj, pose) {\n    console.log(\"added new goal\");\n    this.setState({\n      message: 'Robot is moving to Goal',\n      enableCancel: true\n    });\n    var goal = new ROSLIB.Goal({\n      actionClient: this.actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: 'map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"box-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      border: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        fontSize: \"1.2rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 54\n      }\n    }, \"Map\")), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: \"map-container\",\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: \"map-controller\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"map-button\",\n      variant: \"danger\",\n      onClick: () => this.setState({\n        command: 'SetGoal',\n        message: 'Send goal to your robot'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, \"Set Goal\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"map-button\",\n      variant: \"success\",\n      onClick: () => this.setState({\n        command: 'AddStation',\n        message: 'Add new station',\n        stationName: 'NoName'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, \"Add Station\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"map-button\",\n      variant: \"outline-success\",\n      onClick: () => this.setState({\n        command: 'DeleteStation',\n        message: 'Click to delete station'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, \"Delete Station\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"map-button\",\n      variant: \"warning\",\n      onClick: () => this.setState({\n        command: 'none',\n        message: 'Robot is ready !'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, \"Cancel\")), /*#__PURE__*/React.createElement(Nav2d, {\n      id: \"random\",\n      height: 480,\n      ros: this.ros,\n      serverName: \"/move_base\",\n      imageRobot: require('./jarvis.png'),\n      imageGoalArrow: require('./arrow-red.png'),\n      stations: this.state.stations,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/luong/kobuki_web/src/components/Map/Map.js"],"names":["React","Component","Container","Card","Button","ROSLIB","Nav2d","Map","constructor","props","ros","state","command","message","stationName","enableCancel","stations","onAddStation","bind","onClickStation","onSetGoal","actionClient","InsertStationService","DeleteStationService","GetStationService","componentDidMount","serverName","actionName","ActionClient","Service","name","serviceType","callService","res","setState","station_list","newStation","stationList","push","console","log","request","ServiceRequest","positionX","positionY","positionZ","orientationX","orientationY","orientationZ","orientationW","id","stationId","targetIndex","forEach","item","index","splice","positionVec3","Vector3","orientation","Quaternion","x","y","z","w","pose","Pose","position","goal","Goal","goalMessage","target_pose","header","frame_id","send","obj","render","fontSize","require"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Container, Card, Button } from \"react-bootstrap\";\nimport ROSLIB from \"roslib\";\nimport Nav2d from \"react-nav2djs/lib\";\nimport \"./Map.css\";\nimport \"../CommonStyle.css\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.ros = props.ros || null;\n    this.state = {\n      command: 'none',\n      message: 'Robot is ready !',\n      stationName: 'NoName',\n      enableCancel: false,\n      stations: [],\n    }\n    this.onAddStation = this.onAddStation.bind(this);\n    this.onClickStation = this.onClickStation.bind(this);\n    this.onSetGoal = this.onSetGoal.bind(this);\n    this.actionClient = null;\n    this.InsertStationService = null;\n    this.DeleteStationService = null;\n    this.GetStationService = null;\n  }\n\n  componentDidMount() {\n    if (this.props.ros != null) {\n      this.ros = this.props.ros;\n      var serverName = this.props.serverName || '/move_base';\n      var actionName = this.props.actionName || 'move_base_msgs/MoveBaseAction';\n      this.actionClient = new ROSLIB.ActionClient({\n        ros: this.ros,\n        actionName: actionName,\n        serverName: serverName\n      });\n      this.InsertStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/add_station',\n        serviceType: 'kobuki_ui/AddStation',\n      });\n      this.DeleteStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/delete_station',\n        serviceType: 'kobuki_ui/DeleteStation',\n      });\n      this.GetStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/get_station_list',\n        serviceType: 'kobuki_ui/GetStationList',\n      });\n      this.GetStationService.callService(null,(res) => {\n        this.setState({stations: res.station_list});\n      });\n    }\n  }\n\n  onAddStation(newStation) {\n    if (newStation) {\n      var stationList = this.state.stations;\n      stationList.push(newStation);\n      this.setState({stations: stationList});\n      console.log(\"added new station\", newStation.name);\n      var request = new ROSLIB.ServiceRequest({\n        name: newStation.name,\n        positionX: newStation.positionX,\n        positionY: newStation.positionY,\n        positionZ: newStation.positionZ,\n        orientationX: newStation.orientationX,\n        orientationY: newStation.orientationY,\n        orientationZ: newStation.orientationZ,\n        orientationW: newStation.orientationW,\n        id: newStation.id,\n      });\n      this.InsertStationService.callService(request);\n    }\n  }\n\n  onClickStation(stationId) {\n    var targetIndex = -1;\n    this.state.stations.forEach((item, index) => {\n      if (item.id == stationId) {\n        targetIndex = index;\n      }\n    });\n    if (targetIndex >= 0) {\n      if (this.state.command == 'DeleteStation') {\n        console.log(\"remove station\", this.state.stations[targetIndex].name);\n        var request = new ROSLIB.ServiceRequest({\n          id: this.state.stations[targetIndex].id,\n        });\n        this.DeleteStationService.callService(request);\n        var stationList = this.state.stations;\n        stationList.splice(targetIndex, 1);\n        this.setState({stations: stationList});\n      } else {\n        console.log(\"Go to station\", this.state.stations[targetIndex].name);\n        this.setState({message: 'Robot is moving to station ' + this.state.stations[targetIndex].name, enableCancel: true, command: 'CancelGoal'});\n        var positionVec3 = new ROSLIB.Vector3(null);\n        var orientation = new ROSLIB.Quaternion({\n          x: this.state.stations[targetIndex].orientationX,\n          y: this.state.stations[targetIndex].orientationY,\n          z: this.state.stations[targetIndex].orientationZ,\n          w: this.state.stations[targetIndex].orientationW\n        });\n        \n        positionVec3.x = this.state.stations[targetIndex].positionX;\n        positionVec3.y = this.state.stations[targetIndex].positionY;\n\n        var pose = new ROSLIB.Pose({\n          position : positionVec3,\n          orientation : orientation\n        });\n        var goal = new ROSLIB.Goal({\n          actionClient: this.actionClient,\n          goalMessage: {\n            target_pose: {\n              header: {\n                frame_id: 'map'\n              },\n              pose: pose,\n            }\n          }\n        });\n        goal.send();\n      }\n    }\n  }\n\n  onSetGoal(obj, pose) {\n    console.log(\"added new goal\");\n    this.setState({message: 'Robot is moving to Goal', enableCancel: true});\n    var goal = new ROSLIB.Goal({\n      actionClient: this.actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: 'map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n  }\n\n  render() {\n    return (\n      <Container className=\"box-margin\">\n        <Card border=\"secondary\">\n          <Card.Header style={{fontSize: \"1.2rem\" }}><strong>Map</strong></Card.Header>\n          <Card.Body>\n            <Container className=\"map-container\" id=\"map\">\n              <Container className=\"map-controller\">\n                <Button className=\"map-button\" variant='danger' onClick={() => this.setState({ command: 'SetGoal', message: 'Send goal to your robot' })}>Set Goal</Button>\n                {/* <Button className=\"map-button\" variant='outline-danger' onClick={() => this.setState({command: 'CancelGoal'})}>Cancel Goal</Button> */}\n                <Button className=\"map-button\" variant='success' onClick={() => this.setState({ command: 'AddStation', message: 'Add new station', stationName: 'NoName' })}>Add Station</Button>\n                <Button className=\"map-button\" variant='outline-success' onClick={() => this.setState({ command: 'DeleteStation', message: 'Click to delete station' })}>Delete Station</Button>\n                <Button className=\"map-button\" variant='warning' onClick={() => this.setState({ command: 'none', message: 'Robot is ready !' })}>Cancel</Button>\n              </Container>\n              <Nav2d\n                id='random'\n                height={480}\n                ros={this.ros}\n                serverName='/move_base'\n                imageRobot={require('./jarvis.png')}\n                imageGoalArrow={require('./arrow-red.png')}\n                stations={this.state.stations}\n              />\n            </Container>\n          </Card.Body>\n        </Card>\n      </Container>\n    )\n  }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}