{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nrequire('latest-createjs');\n\nvar _ros2d = require('./ros2d');\n\nvar _ros2d2 = _interopRequireDefault(_ros2d);\n\nvar _roslib = require('roslib');\n\nvar _roslib2 = _interopRequireDefault(_roslib);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.navigator = null; // setup a client to get the map\n\n  var client = new _ros2d2.default.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    }); // scale the viewer to fit the map\n\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\n\n\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.imageRobot = options.imageRobot;\n  this.imageGoalArrow = options.imageGoalArrow; // setup the actionlib client\n\n  var actionClient = new _roslib2.default.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new _roslib2.default.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: 'map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send(); // create a marker for the goal\n\n    var goalMarker = new _ros2d2.default.NavigationImage({\n      size: 2,\n      image_src: that.imageGoalArrow,\n      alpha: 0.9\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  } // get a handle to the stage\n\n\n  var stage;\n\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  } // marker for the robot\n\n\n  var robotMarker = new _ros2d2.default.NavigationImage({\n    size: 2,\n    image_src: that.imageRobot,\n    alpha: 1\n  }); // wait for a pose to come in first\n\n  robotMarker.visible = false;\n  this.rootObject.addChild(robotMarker);\n  console.log(this.rootObject.getChildIndex(this.robotMarker));\n  var initScaleSet = false; // setup a listener for the robot pose\n\n  /*var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/Pose',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    robotMarker.x = pose.position.x;\n    robotMarker.y = -pose.position.y;\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    }\n     // change the angle\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n     robotMarker.visible = true;\n  });*/\n  // create a listener for the robot pose\n\n  var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/gazebo/model_states',\n    messageType: 'gazebo_msgs/ModelStates',\n    throttle_rate: 100\n  }); // subscribe to the topic and update the robot marker when a new message is received\n\n  poseListener.subscribe(function (message) {\n    // find the index of the robot in the model_states message\n    var index = message.name.indexOf('mobile_base');\n\n    if (index !== -1) {\n      // update the robot marker position and orientation\n      robotMarker.x = message.pose[index].position.x;\n      robotMarker.y = -message.pose[index].position.y;\n      robotMarker.rotation = stage.rosQuaternionToGlobalTheta(message.pose[index].orientation);\n      robotMarker.visible = true;\n    }\n  });\n\n  if (withOrientation !== false) {\n    // setup a double click listener (no orientation)\n    this.rootObject.addEventListener('dblclick', function (event) {\n      // convert to ROS coordinates\n      var coords = stage.globalToRos(event.stageX, event.stageY);\n      var pose = new _roslib2.default.Pose({\n        position: new _roslib2.default.Vector3(coords)\n      }); // send the goal\n\n      sendGoal(pose);\n      console.log(\"orientation false\");\n    });\n  } else {\n    // withOrientation === true\n    // setup a click-and-point listener (with orientation)\n    var position = null;\n    var positionVec3 = null;\n    var thetaRadians = 0;\n    var thetaDegrees = 0;\n    var orientationMarker = null;\n    var mouseDown = false;\n    var xDelta = 0;\n    var yDelta = 0;\n\n    var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n      if (mouseState === 'down') {\n        // get position when mouse button is pressed down\n        position = stage.globalToRos(event.stageX, event.stageY);\n        positionVec3 = new _roslib2.default.Vector3(position);\n        mouseDown = true;\n      } else if (mouseState === 'move') {\n        // remove obsolete orientation marker\n        that.rootObject.removeChild(orientationMarker);\n\n        if (mouseDown === true) {\n          // if mouse button is held down:\n          // - get current mouse position\n          // - calulate direction between stored <position> and current position\n          // - place orientation marker\n          var currentPos = stage.globalToRos(event.stageX, event.stageY);\n          var currentPosVec3 = new _roslib2.default.Vector3(currentPos); // orientationMarker = new _ros2d2.default.NavigationImage({\n          //   size: 2,\n          //   image_src: that.imageGoalArrow,\n          //   alpha: 0.9,\n          // });\n\n          orientationMarker = new _ros2d2.default.NavigationArrow({\n            size: 25,\n            strokeSize: 1,\n            fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66)\n          });\n          xDelta = currentPosVec3.x - positionVec3.x;\n          yDelta = currentPosVec3.y - positionVec3.y;\n          thetaRadians = Math.atan2(xDelta, yDelta);\n          thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n          if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n            thetaDegrees += 270;\n          } else {\n            thetaDegrees -= 90;\n          }\n\n          orientationMarker.x = positionVec3.x;\n          orientationMarker.y = -positionVec3.y;\n          orientationMarker.rotation = thetaDegrees;\n          console.log(orientationMarker.x, orientationMarker.y, orientationMarker.rotation);\n          orientationMarker.scaleX = 1.0 / stage.scaleX;\n          orientationMarker.scaleY = 1.0 / stage.scaleY;\n          that.rootObject.addChild(orientationMarker);\n        }\n      } else if (mouseDown) {\n        // mouseState === 'up'\n        // if mouse button is released\n        // - get current mouse position (goalPos)\n        // - calulate direction between stored <position> and goal position\n        // - set pose with orientation\n        // - send goal\n        mouseDown = false;\n        var goalPos = stage.globalToRos(event.stageX, event.stageY);\n        var goalPosVec3 = new _roslib2.default.Vector3(goalPos);\n        xDelta = goalPosVec3.x - positionVec3.x;\n        yDelta = goalPosVec3.y - positionVec3.y;\n        thetaRadians = Math.atan2(xDelta, yDelta);\n\n        if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n          thetaRadians += 3 * Math.PI / 2;\n        } else {\n          thetaRadians -= Math.PI / 2;\n        }\n\n        var qz = Math.sin(-thetaRadians / 2.0);\n        var qw = Math.cos(-thetaRadians / 2.0);\n        var orientation = new _roslib2.default.Quaternion({\n          x: 0,\n          y: 0,\n          z: qz,\n          w: qw\n        });\n        var pose = new _roslib2.default.Pose({\n          position: positionVec3,\n          orientation: orientation\n        }); // send the goal\n\n        sendGoal(pose);\n        console.log(\"orientation true\");\n      }\n    };\n\n    this.rootObject.addEventListener('stagemousedown', function (event) {\n      mouseEventHandler(event, 'down');\n    });\n    this.rootObject.addEventListener('stagemousemove', function (event) {\n      mouseEventHandler(event, 'move');\n    });\n    this.rootObject.addEventListener('stagemouseup', function (event) {\n      mouseEventHandler(event, 'up');\n    });\n  }\n};\n\nNAV2D.Navigator.prototype.setCommand = function (command) {\n  this.command = command;\n\n  if (this.command == 'CancelGoal') {\n    this.rootObject.removeChild(this.orientationMarkerGoal);\n  }\n};\n\nNAV2D.Navigator.prototype.setStationName = function (stationName) {\n  this.stationName = stationName;\n};\n\nNAV2D.Navigator.prototype.syncStation = function (station) {\n  for (var i = this.stationList.length - 1; i >= 0; i--) {\n    var del = true;\n\n    for (var j = 0; j < station.length; j++) {\n      if (this.stationList[i].info.id == station[j].id) {\n        del = false;\n      }\n    }\n\n    if (del) {\n      this.rootObject.removeChild(this.stationList[i].marker);\n      this.rootObject.removeChild(this.stationList[i].text);\n      this.stationList.splice(i, 1);\n    }\n  }\n\n  for (var i = station.length - 1; i >= 0; i--) {\n    var available = false;\n\n    for (var j = 0; j < this.stationList.length; j++) {\n      if (this.stationList[j].info.id == station[i].id) {\n        available = true;\n      }\n    }\n\n    if (available == false) {\n      var stationMarker = new ROS2D.NavigationImage({\n        size: 0.52,\n        image: this.imageStationArrow,\n        alpha: 0.8,\n        pulse: true\n      });\n      var thetaDegrees = station[i].degrees;\n      stationMarker.x = station[i].pose.position.x;\n      stationMarker.y = -station[i].pose.position.y;\n      stationMarker.rotation = thetaDegrees; // this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n\n      var text = new createjs.Text(station[i].name, \"0.01rem Helvetica\", \"#ff7700\");\n      text.x = stationMarker.x - text.getBounds().width / 2;\n      text.y = stationMarker.y - 0.45;\n      this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n      this.rootObject.addChildAt(text, this.rootObject.getChildIndex(this.robotMarker));\n      this.stationList.push({\n        info: station[i],\n        marker: stationMarker,\n        text: text\n      });\n    }\n  }\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\n\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  var imageRobot = options.imageRobot;\n  var imageGoalArrow = options.imageGoalArrow;\n  this.navigator = null; // setup a client to get the map\n\n  var client = new _ros2d2.default.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation,\n      imageRobot: imageRobot,\n      imageGoalArrow: imageGoalArrow\n    }); // scale the viewer to fit the map\n\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setCommand = function (command) {\n  // this.command = command;\n  this.navigator.setCommand(command);\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setStationName = function (stationName) {\n  this.navigator.setStationName(stationName);\n};\n\nNAV2D.OccupancyGridClientNav.prototype.syncStation = function (station) {\n  this.navigator.syncStation(station);\n};\n\nexports.default = NAV2D;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/home/luong/kobuki_web/react-nav2djs-0.0.3/package/lib/vendor/nav2d.js"],"names":["exports","__esModule","require","_ros2d","_ros2d2","_interopRequireDefault","_roslib","_roslib2","obj","default","NAV2D","REVISION","ImageMapClientNav","options","that","ros","topic","image","serverName","actionName","rootObject","createjs","Container","viewer","withOrientation","navigator","client","ImageMapClient","on","Navigator","scaleToDimensions","currentImage","width","height","shift","pose","position","x","y","imageRobot","imageGoalArrow","actionClient","ActionClient","sendGoal","goal","Goal","goalMessage","target_pose","header","frame_id","send","goalMarker","NavigationImage","size","image_src","alpha","rotation","stage","rosQuaternionToGlobalTheta","orientation","scaleX","scaleY","addChild","removeChild","Stage","getStage","robotMarker","visible","console","log","getChildIndex","initScaleSet","poseListener","Topic","name","messageType","throttle_rate","subscribe","message","index","indexOf","addEventListener","event","coords","globalToRos","stageX","stageY","Pose","Vector3","positionVec3","thetaRadians","thetaDegrees","orientationMarker","mouseDown","xDelta","yDelta","mouseEventHandler","mouseState","currentPos","currentPosVec3","NavigationArrow","strokeSize","fillColor","Graphics","getRGB","Math","atan2","PI","goalPos","goalPosVec3","qz","sin","qw","cos","Quaternion","z","w","prototype","setCommand","command","orientationMarkerGoal","setStationName","stationName","syncStation","station","i","stationList","length","del","j","info","id","marker","text","splice","available","stationMarker","ROS2D","imageStationArrow","pulse","degrees","Text","getBounds","addChildAt","push","OccupancyGridClientNav","continuous","OccupancyGridClient","currentGrid","module"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nrequire('latest-createjs');\n\nvar _ros2d = require('./ros2d');\n\nvar _ros2d2 = _interopRequireDefault(_ros2d);\n\nvar _roslib = require('roslib');\n\nvar _roslib2 = _interopRequireDefault(_roslib);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new _ros2d2.default.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.imageRobot = options.imageRobot;\n  this.imageGoalArrow = options.imageGoalArrow;\n\n  // setup the actionlib client\n  var actionClient = new _roslib2.default.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new _roslib2.default.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: 'map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n\n    // create a marker for the goal\n    var goalMarker = new _ros2d2.default.NavigationImage({\n      size: 2,\n      image_src: that.imageGoalArrow,\n      alpha: 0.9,\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  }\n\n  // get a handle to the stage\n  var stage;\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  }\n\n  // marker for the robot\n  var robotMarker = new _ros2d2.default.NavigationImage({\n    size: 2,\n    image_src: that.imageRobot,\n    alpha: 1,\n  });\n  // wait for a pose to come in first\n  robotMarker.visible = false;\n  this.rootObject.addChild(robotMarker);\n  console.log(this.rootObject.getChildIndex(this.robotMarker));\n  var initScaleSet = false;\n\n  // setup a listener for the robot pose\n  /*var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/Pose',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    robotMarker.x = pose.position.x;\n    robotMarker.y = -pose.position.y;\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    }\n\n    // change the angle\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n\n    robotMarker.visible = true;\n  });*/\n  \n  // create a listener for the robot pose\n  var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/gazebo/model_states',\n    messageType: 'gazebo_msgs/ModelStates',\n    throttle_rate: 100\n  });\n\n  // subscribe to the topic and update the robot marker when a new message is received\n  poseListener.subscribe(function (message) {\n    // find the index of the robot in the model_states message\n    var index = message.name.indexOf('mobile_base');\n    if (index !== -1) {\n      // update the robot marker position and orientation\n      robotMarker.x = message.pose[index].position.x;\n      robotMarker.y = -message.pose[index].position.y;\n      robotMarker.rotation = stage.rosQuaternionToGlobalTheta(message.pose[index].orientation);\n      robotMarker.visible = true;\n    }\n  });\n\n\n  if (withOrientation !== false) {\n    // setup a double click listener (no orientation)\n    this.rootObject.addEventListener('dblclick', function (event) {\n      // convert to ROS coordinates\n      var coords = stage.globalToRos(event.stageX, event.stageY);\n      var pose = new _roslib2.default.Pose({\n        position: new _roslib2.default.Vector3(coords)\n      });\n      // send the goal\n      sendGoal(pose);\n      console.log(\"orientation false\");\n    });\n  } else {\n    // withOrientation === true\n    // setup a click-and-point listener (with orientation)\n    var position = null;\n    var positionVec3 = null;\n    var thetaRadians = 0;\n    var thetaDegrees = 0;\n    var orientationMarker = null;\n    var mouseDown = false;\n    var xDelta = 0;\n    var yDelta = 0;\n\n    var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n\n      if (mouseState === 'down') {\n        // get position when mouse button is pressed down\n        position = stage.globalToRos(event.stageX, event.stageY);\n        positionVec3 = new _roslib2.default.Vector3(position);\n        mouseDown = true;\n      } else if (mouseState === 'move') {\n        // remove obsolete orientation marker\n        that.rootObject.removeChild(orientationMarker);\n\n        if (mouseDown === true) {\n          // if mouse button is held down:\n          // - get current mouse position\n          // - calulate direction between stored <position> and current position\n          // - place orientation marker\n          var currentPos = stage.globalToRos(event.stageX, event.stageY);\n          var currentPosVec3 = new _roslib2.default.Vector3(currentPos);\n\n          // orientationMarker = new _ros2d2.default.NavigationImage({\n          //   size: 2,\n          //   image_src: that.imageGoalArrow,\n          //   alpha: 0.9,\n          // });\n          orientationMarker = new _ros2d2.default.NavigationArrow({\n            size: 25,\n            strokeSize: 1,\n            fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66),\n\n          });\n\n          xDelta = currentPosVec3.x - positionVec3.x;\n          yDelta = currentPosVec3.y - positionVec3.y;\n\n          thetaRadians = Math.atan2(xDelta, yDelta);\n\n          thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n          if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n            thetaDegrees += 270;\n          } else {\n            thetaDegrees -= 90;\n          }\n\n          orientationMarker.x = positionVec3.x;\n          orientationMarker.y = -positionVec3.y;\n          orientationMarker.rotation = thetaDegrees;\n          console.log(orientationMarker.x, orientationMarker.y, orientationMarker.rotation);\n          orientationMarker.scaleX = 1.0 / stage.scaleX;\n          orientationMarker.scaleY = 1.0 / stage.scaleY;\n\n          that.rootObject.addChild(orientationMarker);\n        }\n      } else if (mouseDown) {\n        // mouseState === 'up'\n        // if mouse button is released\n        // - get current mouse position (goalPos)\n        // - calulate direction between stored <position> and goal position\n        // - set pose with orientation\n        // - send goal\n        mouseDown = false;\n\n        var goalPos = stage.globalToRos(event.stageX, event.stageY);\n\n        var goalPosVec3 = new _roslib2.default.Vector3(goalPos);\n\n        xDelta = goalPosVec3.x - positionVec3.x;\n        yDelta = goalPosVec3.y - positionVec3.y;\n\n        thetaRadians = Math.atan2(xDelta, yDelta);\n\n        if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n          thetaRadians += 3 * Math.PI / 2;\n        } else {\n          thetaRadians -= Math.PI / 2;\n        }\n\n        var qz = Math.sin(-thetaRadians / 2.0);\n        var qw = Math.cos(-thetaRadians / 2.0);\n\n        var orientation = new _roslib2.default.Quaternion({ x: 0, y: 0, z: qz, w: qw });\n\n        var pose = new _roslib2.default.Pose({\n          position: positionVec3,\n          orientation: orientation\n        });\n        // send the goal\n        sendGoal(pose);\n        console.log(\"orientation true\");\n      }\n    };\n\n    this.rootObject.addEventListener('stagemousedown', function (event) {\n      mouseEventHandler(event, 'down');\n    });\n\n    this.rootObject.addEventListener('stagemousemove', function (event) {\n      mouseEventHandler(event, 'move');\n    });\n\n    this.rootObject.addEventListener('stagemouseup', function (event) {\n      mouseEventHandler(event, 'up');\n    });\n  }\n};\n\nNAV2D.Navigator.prototype.setCommand = function (command) {\n  this.command = command;\n  if (this.command == 'CancelGoal') {\n    this.rootObject.removeChild(this.orientationMarkerGoal);\n  }\n}\n\nNAV2D.Navigator.prototype.setStationName = function (stationName) {\n  this.stationName = stationName;\n}\n\nNAV2D.Navigator.prototype.syncStation = function (station) {\n  for (var i = this.stationList.length - 1; i >= 0; i--) {\n    var del = true;\n    for (var j = 0; j < station.length; j++) {\n      if (this.stationList[i].info.id == station[j].id) {\n        del = false;\n      }\n    }\n    if (del) {\n      this.rootObject.removeChild(this.stationList[i].marker);\n      this.rootObject.removeChild(this.stationList[i].text);\n      this.stationList.splice(i, 1);\n    }\n  }\n  for (var i = station.length - 1; i >= 0; i--) {\n    var available = false;\n    for (var j = 0; j < this.stationList.length; j++) {\n      if (this.stationList[j].info.id == station[i].id) {\n        available = true;\n      }\n    }\n    if (available == false) {\n\n      var stationMarker =  new ROS2D.NavigationImage({\n        size: 0.52,\n        image: this.imageStationArrow,\n        alpha: 0.8,\n        pulse: true,\n      });\n\n      var thetaDegrees = station[i].degrees;\n\n      stationMarker.x = station[i].pose.position.x;\n      stationMarker.y = -station[i].pose.position.y;\n      stationMarker.rotation = thetaDegrees;\n\n      // this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n\n      var text = new createjs.Text(station[i].name, \"0.01rem Helvetica\", \"#ff7700\");\n      text.x = stationMarker.x - text.getBounds().width / 2;\n      text.y = stationMarker.y - 0.45;\n      this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n      this.rootObject.addChildAt(text, this.rootObject.getChildIndex(this.robotMarker));\n      this.stationList.push({\n        info: station[i],\n        marker: stationMarker,\n        text: text,\n      });\n    }\n  }\n}\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  var imageRobot = options.imageRobot;\n  var imageGoalArrow = options.imageGoalArrow;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new _ros2d2.default.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation,\n      imageRobot: imageRobot,\n      imageGoalArrow: imageGoalArrow,\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setCommand = function (command) {\n  // this.command = command;\n  this.navigator.setCommand(command);\n}\n\nNAV2D.OccupancyGridClientNav.prototype.setStationName = function (stationName) {\n  this.navigator.setStationName(stationName);\n}\n\nNAV2D.OccupancyGridClientNav.prototype.syncStation = function (station) {\n  this.navigator.syncStation(station);\n}\n\nexports.default = NAV2D;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}