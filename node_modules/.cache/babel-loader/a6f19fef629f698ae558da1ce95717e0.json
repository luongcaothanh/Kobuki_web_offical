{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nrequire('latest-createjs');\n\nvar _ros2d = require('./ros2d');\n\nvar _ros2d2 = _interopRequireDefault(_ros2d);\n\nvar _roslib = require('roslib');\n\nvar _roslib2 = _interopRequireDefault(_roslib);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.navigator = null; // setup a client to get the map\n\n  var client = new _ros2d2.default.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    }); // scale the viewer to fit the map\n\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\n\n\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container(); // setup the actionlib client\n\n  var actionClient = new _roslib2.default.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new _roslib2.default.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: '/map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send(); // create a marker for the goal\n\n    var goalMarker = new _ros2d2.default.NavigationArrow({\n      size: 15,\n      strokeSize: 1,\n      fillColor: createjs.Graphics.getRGB(255, 64, 128, 0.66),\n      pulse: true\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  } // get a handle to the stage\n\n\n  var stage;\n\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  } // marker for the robot\n\n\n  var robotMarker = new _ros2d2.default.NavigationArrow({\n    size: 25,\n    strokeSize: 1,\n    fillColor: createjs.Graphics.getRGB(255, 128, 0, 0.66),\n    pulse: true\n  }); // wait for a pose to come in first\n\n  robotMarker.visible = false;\n  this.rootObject.addChild(robotMarker);\n  var initScaleSet = false; // setup a listener for the robot pose\n\n  var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/Pose',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    robotMarker.x = pose.position.x;\n    robotMarker.y = -pose.position.y;\n\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    } // change the angle\n\n\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    robotMarker.visible = true;\n  });\n\n  if (withOrientation !== false) {\n    // setup a double click listener (no orientation)\n    this.rootObject.addEventListener('dblclick', function (event) {\n      // convert to ROS coordinates\n      var coords = stage.globalToRos(event.stageX, event.stageY);\n      var pose = new _roslib2.default.Pose({\n        position: new _roslib2.default.Vector3(coords)\n      }); // send the goal\n\n      sendGoal(pose);\n    });\n  } else {\n    console.log(\"withOrientation true\"); // withOrientation === true\n    // setup a click-and-point listener (with orientation)\n\n    var position = null;\n    var positionVec3 = null;\n    var thetaRadians = 0;\n    var thetaDegrees = 0;\n    var orientationMarker = null;\n    var mouseDown = false;\n    var xDelta = 0;\n    var yDelta = 0;\n\n    var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n      if (mouseState === 'down') {\n        // get position when mouse button is pressed down\n        position = stage.globalToRos(event.stageX, event.stageY);\n        positionVec3 = new _roslib2.default.Vector3(position);\n        mouseDown = true;\n      } else if (mouseState === 'move') {\n        // remove obsolete orientation marker\n        that.rootObject.removeChild(orientationMarker);\n\n        if (mouseDown === true) {\n          // if mouse button is held down:\n          // - get current mouse position\n          // - calulate direction between stored <position> and current position\n          // - place orientation marker\n          var currentPos = stage.globalToRos(event.stageX, event.stageY);\n          var currentPosVec3 = new _roslib2.default.Vector3(currentPos);\n          orientationMarker = new _ros2d2.default.NavigationArrow({\n            size: 25,\n            strokeSize: 1,\n            fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66),\n            pulse: false\n          });\n          xDelta = currentPosVec3.x - positionVec3.x;\n          yDelta = currentPosVec3.y - positionVec3.y;\n          thetaRadians = Math.atan2(xDelta, yDelta);\n          thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n          if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n            thetaDegrees += 270;\n          } else {\n            thetaDegrees -= 90;\n          }\n\n          orientationMarker.x = positionVec3.x;\n          orientationMarker.y = -positionVec3.y;\n          orientationMarker.rotation = thetaDegrees;\n          orientationMarker.scaleX = 1.0 / stage.scaleX;\n          orientationMarker.scaleY = 1.0 / stage.scaleY;\n          that.rootObject.addChild(orientationMarker);\n        }\n      } else if (mouseDown) {\n        // mouseState === 'up'\n        // if mouse button is released\n        // - get current mouse position (goalPos)\n        // - calulate direction between stored <position> and goal position\n        // - set pose with orientation\n        // - send goal\n        mouseDown = false;\n        var goalPos = stage.globalToRos(event.stageX, event.stageY);\n        var goalPosVec3 = new _roslib2.default.Vector3(goalPos);\n        xDelta = goalPosVec3.x - positionVec3.x;\n        yDelta = goalPosVec3.y - positionVec3.y;\n        thetaRadians = Math.atan2(xDelta, yDelta);\n\n        if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n          thetaRadians += 3 * Math.PI / 2;\n        } else {\n          thetaRadians -= Math.PI / 2;\n        }\n\n        var qz = Math.sin(-thetaRadians / 2.0);\n        var qw = Math.cos(-thetaRadians / 2.0);\n        var orientation = new _roslib2.default.Quaternion({\n          x: 0,\n          y: 0,\n          z: qz,\n          w: qw\n        });\n        var pose = new _roslib2.default.Pose({\n          position: positionVec3,\n          orientation: orientation\n        }); // send the goal\n\n        sendGoal(pose);\n      }\n    };\n\n    this.rootObject.addEventListener('stagemousedown', function (event) {\n      mouseEventHandler(event, 'down');\n    });\n    this.rootObject.addEventListener('stagemousemove', function (event) {\n      mouseEventHandler(event, 'move');\n    });\n    this.rootObject.addEventListener('stagemouseup', function (event) {\n      mouseEventHandler(event, 'up');\n    });\n  }\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\n\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.navigator = null; // setup a client to get the map\n\n  var client = new _ros2d2.default.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    }); // scale the viewer to fit the map\n\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n};\n\nexports.default = NAV2D;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/home/luong/kobuki_web/react-nav2djs-0.0.3/package/lib/vendor/nav2d.js"],"names":["exports","__esModule","require","_ros2d","_ros2d2","_interopRequireDefault","_roslib","_roslib2","obj","default","NAV2D","REVISION","ImageMapClientNav","options","that","ros","topic","image","serverName","actionName","rootObject","createjs","Container","viewer","withOrientation","navigator","client","ImageMapClient","on","Navigator","scaleToDimensions","currentImage","width","height","shift","pose","position","x","y","actionClient","ActionClient","sendGoal","goal","Goal","goalMessage","target_pose","header","frame_id","send","goalMarker","NavigationArrow","size","strokeSize","fillColor","Graphics","getRGB","pulse","rotation","stage","rosQuaternionToGlobalTheta","orientation","scaleX","scaleY","addChild","removeChild","Stage","getStage","robotMarker","visible","initScaleSet","poseListener","Topic","name","messageType","throttle_rate","subscribe","addEventListener","event","coords","globalToRos","stageX","stageY","Pose","Vector3","console","log","positionVec3","thetaRadians","thetaDegrees","orientationMarker","mouseDown","xDelta","yDelta","mouseEventHandler","mouseState","currentPos","currentPosVec3","Math","atan2","PI","goalPos","goalPosVec3","qz","sin","qw","cos","Quaternion","z","w","OccupancyGridClientNav","continuous","OccupancyGridClient","currentGrid","module"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nrequire('latest-createjs');\n\nvar _ros2d = require('./ros2d');\n\nvar _ros2d2 = _interopRequireDefault(_ros2d);\n\nvar _roslib = require('roslib');\n\nvar _roslib2 = _interopRequireDefault(_roslib);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new _ros2d2.default.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // setup the actionlib client\n  var actionClient = new _roslib2.default.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new _roslib2.default.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: '/map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n\n    // create a marker for the goal\n    var goalMarker = new _ros2d2.default.NavigationArrow({\n      size: 15,\n      strokeSize: 1,\n      fillColor: createjs.Graphics.getRGB(255, 64, 128, 0.66),\n      pulse: true\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  }\n\n  // get a handle to the stage\n  var stage;\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  }\n\n  // marker for the robot\n  var robotMarker = new _ros2d2.default.NavigationArrow({\n    size: 25,\n    strokeSize: 1,\n    fillColor: createjs.Graphics.getRGB(255, 128, 0, 0.66),\n    pulse: true\n  });\n  // wait for a pose to come in first\n  robotMarker.visible = false;\n  this.rootObject.addChild(robotMarker);\n  var initScaleSet = false;\n\n  // setup a listener for the robot pose\n  var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/Pose',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    robotMarker.x = pose.position.x;\n    robotMarker.y = -pose.position.y;\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    }\n\n    // change the angle\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n\n    robotMarker.visible = true;\n  });\n\n  if (withOrientation !== false) {\n    // setup a double click listener (no orientation)\n    this.rootObject.addEventListener('dblclick', function (event) {\n      // convert to ROS coordinates\n      var coords = stage.globalToRos(event.stageX, event.stageY);\n      var pose = new _roslib2.default.Pose({\n        position: new _roslib2.default.Vector3(coords)\n      });\n      // send the goal\n      sendGoal(pose);\n    });\n  } else {\n    console.log(\"withOrientation true\");\n    // withOrientation === true\n    // setup a click-and-point listener (with orientation)\n    var position = null;\n    var positionVec3 = null;\n    var thetaRadians = 0;\n    var thetaDegrees = 0;\n    var orientationMarker = null;\n    var mouseDown = false;\n    var xDelta = 0;\n    var yDelta = 0;\n\n    var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n\n      if (mouseState === 'down') {\n        // get position when mouse button is pressed down\n        position = stage.globalToRos(event.stageX, event.stageY);\n        positionVec3 = new _roslib2.default.Vector3(position);\n        mouseDown = true;\n      } else if (mouseState === 'move') {\n        // remove obsolete orientation marker\n        that.rootObject.removeChild(orientationMarker);\n\n        if (mouseDown === true) {\n          // if mouse button is held down:\n          // - get current mouse position\n          // - calulate direction between stored <position> and current position\n          // - place orientation marker\n          var currentPos = stage.globalToRos(event.stageX, event.stageY);\n          var currentPosVec3 = new _roslib2.default.Vector3(currentPos);\n\n          orientationMarker = new _ros2d2.default.NavigationArrow({\n            size: 25,\n            strokeSize: 1,\n            fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66),\n            pulse: false\n          });\n\n          xDelta = currentPosVec3.x - positionVec3.x;\n          yDelta = currentPosVec3.y - positionVec3.y;\n\n          thetaRadians = Math.atan2(xDelta, yDelta);\n\n          thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n          if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n            thetaDegrees += 270;\n          } else {\n            thetaDegrees -= 90;\n          }\n\n          orientationMarker.x = positionVec3.x;\n          orientationMarker.y = -positionVec3.y;\n          orientationMarker.rotation = thetaDegrees;\n          orientationMarker.scaleX = 1.0 / stage.scaleX;\n          orientationMarker.scaleY = 1.0 / stage.scaleY;\n\n          that.rootObject.addChild(orientationMarker);\n        }\n      } else if (mouseDown) {\n        // mouseState === 'up'\n        // if mouse button is released\n        // - get current mouse position (goalPos)\n        // - calulate direction between stored <position> and goal position\n        // - set pose with orientation\n        // - send goal\n        mouseDown = false;\n\n        var goalPos = stage.globalToRos(event.stageX, event.stageY);\n\n        var goalPosVec3 = new _roslib2.default.Vector3(goalPos);\n\n        xDelta = goalPosVec3.x - positionVec3.x;\n        yDelta = goalPosVec3.y - positionVec3.y;\n\n        thetaRadians = Math.atan2(xDelta, yDelta);\n\n        if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n          thetaRadians += 3 * Math.PI / 2;\n        } else {\n          thetaRadians -= Math.PI / 2;\n        }\n\n        var qz = Math.sin(-thetaRadians / 2.0);\n        var qw = Math.cos(-thetaRadians / 2.0);\n\n        var orientation = new _roslib2.default.Quaternion({ x: 0, y: 0, z: qz, w: qw });\n\n        var pose = new _roslib2.default.Pose({\n          position: positionVec3,\n          orientation: orientation\n        });\n        // send the goal\n        sendGoal(pose);\n      }\n    };\n\n    this.rootObject.addEventListener('stagemousedown', function (event) {\n      mouseEventHandler(event, 'down');\n    });\n\n    this.rootObject.addEventListener('stagemousemove', function (event) {\n      mouseEventHandler(event, 'move');\n    });\n\n    this.rootObject.addEventListener('stagemouseup', function (event) {\n      mouseEventHandler(event, 'up');\n    });\n  }\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new _ros2d2.default.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n};\n\nexports.default = NAV2D;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}