{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nrequire('latest-createjs');\n\nvar _roslib = require('roslib');\n\nvar _roslib2 = _interopRequireDefault(_roslib);\n\nvar _eventemitter = require('eventemitter2');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n\nvar ROS2D = ROS2D || {\n  REVISION: '0.9.0'\n}; // convert the given global Stage coordinates to ROS coordinates\n\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new _roslib2.default.Vector3({\n    x: rosX,\n    y: rosY\n  });\n}; // convert the given ROS coordinates to global Stage coordinates\n\n\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y\n  };\n}; // convert a ROS quaternion to theta in degrees\n\n\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z; // Canvas rotation is clock wise and in degrees\n\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\n\n\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image; // save the metadata we need\n\n  this.pose = new _roslib2.default.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation\n  }); // set the size\n\n  this.width = message.width;\n  this.height = message.height; // create the bitmap\n\n  createjs.Bitmap.call(this, image); // change Y direction\n\n  this.y = -this.height * message.resolution; // scale the image\n\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY; // set the pose\n\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\n\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\n\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container(); // create an empty shape to start with\n\n  this.currentImage = new createjs.Shape(); // subscribe to the topic\n\n  var rosTopic = new _roslib2.default.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/MapMetaData'\n  });\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe(); // create the image\n\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image\n    });\n    that.rootObject.addChild(that.currentImage); // work-around for a bug in easeljs -- needs a second object to render correctly\n\n    that.rootObject.addChild(new ROS2D.Grid({\n      size: 1\n    }));\n    that.emit('change');\n  });\n};\n\nROS2D.ImageMapClient.prototype.__proto__ = _eventemitter2.default.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\n\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message; // internal drawing canvas\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d'); // save the metadata we need\n\n  this.pose = new _roslib2.default.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation\n  }); // set the size\n\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n  var imageData = context.createImageData(this.width, this.height);\n\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width; // determine the value\n\n      var data = message.data[mapI];\n      var val;\n\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      } // determine the index into the image data array\n\n\n      var i = (col + row * this.width) * 4; // r\n\n      imageData.data[i] = val; // g\n\n      imageData.data[++i] = val; // b\n\n      imageData.data[++i] = val; // a\n\n      imageData.data[++i] = 255;\n    }\n  }\n\n  context.putImageData(imageData, 0, 0); // create the bitmap\n\n  createjs.Bitmap.call(this, canvas); // change Y direction\n\n  this.y = -this.height * message.info.resolution; // scale the image\n\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY; // set the pose\n\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\n\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\n\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container(); // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid); // work-around for a bug in easeljs -- needs a second object to render correctly\n\n  this.rootObject.addChild(new ROS2D.Grid({\n    size: 1\n  })); // subscribe to the topic\n\n  var rosTopic = new _roslib2.default.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/OccupancyGrid',\n    compression: 'png'\n  });\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message\n    });\n\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n\n    that.emit('change'); // check if we should unsubscribe\n\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n};\n\nROS2D.OccupancyGridClient.prototype.__proto__ = _eventemitter2.default.prototype;\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\n\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container(); // current grid that is displayed\n\n  this.currentGrid = null; // Setting up to the service\n\n  var rosService = new _roslib2.default.Service({\n    ros: ros,\n    name: service,\n    serviceType: 'nav_msgs/GetMap',\n    compression: 'png'\n  });\n  rosService.callService(new _roslib2.default.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n    that.emit('change', that.currentGrid);\n  });\n};\n\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = _eventemitter2.default.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\n\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse; // draw the arrow\n\n  var graphics = new createjs.Graphics();\n  var headLen = size / 3.0;\n  var headWidth = headLen * 2.0 / 3.0;\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke(); // create the shape\n\n  createjs.Shape.call(this, graphics); // check if we are pulsing\n\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\n\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\n\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001; // draw the arrow\n\n  var graphics = new createjs.Graphics(); // line width\n\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n\n  graphics.endFill();\n  graphics.endStroke(); // create the shape\n\n  createjs.Shape.call(this, graphics);\n};\n\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\n\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse; // draw the arrow\n\n  var graphics = new createjs.Graphics(); // line width\n\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke(); // create the shape\n\n  createjs.Shape.call(this, graphics); // check if we are pulsing\n\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\n\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\n\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image_src;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n  var originals = {};\n  var image = new Image();\n\n  var paintImage = function paintImage() {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals['rotation'] = that.rotation;\n    Object.defineProperty(that, 'rotation', {\n      get: function get() {\n        return originals['rotation'] + 90;\n      },\n      set: function set(value) {\n        originals['rotation'] = value;\n      }\n    });\n\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.020;\n      createjs.Ticker.addEventListener('tick', function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n\n  var calculateScale = function calculateScale(_size) {\n    return _size / image.width;\n  };\n\n  image.src = image_url;\n  image.onload = paintImage;\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\n\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0); // draw the line\n\n  this.graphics = new createjs.Graphics();\n\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n\n    this.graphics.endStroke();\n  } // create the shape\n\n\n  createjs.Shape.call(this, this.graphics);\n};\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\n\n\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n\n    this.graphics.endStroke();\n  }\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\n\nROS2D.PolygonMarker = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack; // Array of point shapes\n  //\tthis.points = [];\n\n  this.pointContainer = new createjs.Container(); // Array of line shapes\n  //\tthis.lines = [];\n\n  this.lineContainer = new createjs.Container();\n  this.fillShape = new createjs.Shape(); // Container with all the lines and points\n\n  createjs.Container.call(this);\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.createLineShape = function (startPoint, endPoint) {\n  var line = new createjs.Shape(); //\tline.graphics.setStrokeStyle(this.strokeSize);\n  //\tline.graphics.beginStroke(this.strokeColor);\n  //\tline.graphics.moveTo(startPoint.x, startPoint.y);\n  //\tline.graphics.lineTo(endPoint.x, endPoint.y);\n\n  this.editLineShape(line, startPoint, endPoint);\n  var that = this;\n  line.addEventListener('mousedown', function (event) {\n    if (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n      that.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n    }\n  });\n  return line;\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.editLineShape = function (line, startPoint, endPoint) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n  var that = this;\n  point.addEventListener('mousedown', function (event) {\n    if (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n      that.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n    }\n  });\n  return point;\n};\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\n\n\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren(); // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {// Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(this.pointContainer.getChildAt(numPoints - 2), point);\n    this.lineContainer.addChild(line);\n  }\n\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(this.lineContainer.getChildAt(numPoints - 2), this.pointContainer.getChildAt(numPoints - 2), point);\n  }\n\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n    this.lineContainer.addChild(lineEnd);\n  }\n\n  this.drawFill();\n};\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\n\n\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index; //\tvar point;\n\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj); //\t\tpoint = obj;\n  } else {\n    index = obj; //\t\tpoint = this.pointContainer.getChildAt(index);\n  } // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints < 2) {} else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index + 1) % numPoints));\n    this.lineContainer.removeChildAt(index);\n  }\n\n  this.pointContainer.removeChildAt(index); //\tthis.points.splice(index, 1);\n\n  this.drawFill();\n};\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\n\n\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n\n  point.x = newPos.x;\n  point.y = -newPos.y;\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints);\n    this.editLineShape(line1, this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), point); // line after moved point\n\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(line2, point, this.pointContainer.getChildAt((index + 1) % numPoints));\n  }\n\n  this.drawFill();\n};\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\n\n\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new _roslib2.default.Vector3({\n    x: xh,\n    y: -yh\n  }); // Add a point in the center of the line to split\n\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints; // Add a line between the new point and the end of the line to split\n\n  var lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index + 2) % numPoints));\n  this.lineContainer.addChildAt(lineNew, index + 1); // Set the endpoint of the line to split to the new point\n\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n  this.drawFill();\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n    }\n\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\n\nROS2D.TraceShape = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05; // Store minDist as the square of it\n\n  this.minDist = this.minDist * this.minDist; // Array of the poses\n  // TODO: do we need this?\n\n  this.poses = []; // Create the graphics\n\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor); // Add first pose if given\n\n  if (pose !== null && typeof pose !== 'undefined') {\n    this.poses.push(pose);\n  } // Create the shape\n\n\n  createjs.Shape.call(this, this.graphics);\n};\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\n\n\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n      this.poses.push(pose);\n    }\n  }\n\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n/**\n * Removes front pose and updates the graphics\n */\n\n\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift(); // TODO: shift drawing instructions rather than doing it all over\n\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n    }\n  }\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\n\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject; // get a handle to the stage\n\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.startPos = new _roslib2.default.Vector3();\n};\n\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\n\n\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || '#111111'; // create the canvas to render to\n\n  var canvas = document.createElement('canvas');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas); // create the easel to use\n\n  this.scene = new createjs.Stage(canvas); // change Y axis center\n\n  this.scene.y = this.height; // add the renderer to the page\n\n  document.getElementById(divID).appendChild(canvas); // update at 30fps\n\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n};\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\n\n\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\n\n\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y; // save scene scaling\n\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n};\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\n\n\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y; // shift scene by scaling the desired offset\n\n  this.scene.x -= x * this.scene.scaleX;\n  this.scene.y += y * this.scene.scaleY;\n};\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\n\n\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001; // get a handle to the stage\n\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.center = new _roslib2.default.Vector3();\n  this.startShift = new _roslib2.default.Vector3();\n  this.startScale = new _roslib2.default.Vector3();\n};\n\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n  this.stage.x = this.startShift.x - (this.center.x - this.startShift.x) * (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y = this.startShift.y - (this.center.y - this.startShift.y) * (this.stage.scaleY / this.startScale.y - 1);\n};\n\nexports.default = ROS2D;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/home/luong/kobuki_web/react-nav2djs-0.0.3/package/lib/vendor/ros2d.js"],"names":["exports","__esModule","require","_roslib","_roslib2","_interopRequireDefault","_eventemitter","_eventemitter2","obj","default","ROS2D","REVISION","createjs","Stage","prototype","globalToRos","x","y","rosX","scaleX","rosY","scaleY","Vector3","rosToGlobal","pos","rosQuaternionToGlobalTheta","orientation","q0","w","q1","q2","q3","z","Math","atan2","PI","ImageMap","options","message","image","pose","Pose","position","origin","width","height","Bitmap","call","resolution","__proto__","ImageMapClient","that","ros","topic","rootObject","Container","currentImage","Shape","rosTopic","Topic","name","messageType","subscribe","unsubscribe","addChild","Grid","size","emit","OccupancyGrid","canvas","document","createElement","context","getContext","info","imageData","createImageData","row","col","mapI","data","val","i","putImageData","OccupancyGridClient","continuous","currentGrid","compression","index","getChildIndex","removeChild","addChildAt","OccupancyGridSrvClient","service","rosService","Service","serviceType","callService","ServiceRequest","response","map","ArrowShape","strokeSize","strokeColor","Graphics","getRGB","fillColor","pulse","graphics","headLen","headWidth","setStrokeStyle","beginStroke","moveTo","lineTo","beginFill","closePath","endFill","endStroke","growCount","growing","Ticker","addEventListener","cellSize","lineWidth","NavigationArrow","NavigationImage","image_url","image_src","alpha","originals","Image","paintImage","scale","calculateScale","regY","regX","rotation","Object","defineProperty","get","set","value","SCALE_SIZE","_size","src","onload","PathShape","path","poses","length","setPath","clear","PolygonMarker","lineSize","lineColor","pointSize","pointColor","lineCallBack","pointCallBack","pointContainer","lineContainer","fillShape","createLineShape","startPoint","endPoint","line","editLineShape","event","target","createPointShape","point","drawCircle","addPoint","numPoints","getNumChildren","getChildAt","lineEnd","drawFill","remPoint","removeAllChildren","removeChildAt","movePoint","newPos","line1","line2","splitLine","xs","ys","xe","ye","xh","yh","lineNew","g","TraceShape","maxPoses","minDist","push","addPose","last","prevX","prevY","dx","dy","popFront","shift","PanView","stage","getStage","startPos","startPan","startX","startY","pan","curX","curY","Viewer","divID","background","style","getElementById","appendChild","scene","setFPS","addObject","object","scaleToDimensions","x_prev_shift","y_prev_shift","ZoomView","minScale","center","startShift","startScale","startZoom","centerX","centerY","zoom","module"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nrequire('latest-createjs');\n\nvar _roslib = require('roslib');\n\nvar _roslib2 = _interopRequireDefault(_roslib);\n\nvar _eventemitter = require('eventemitter2');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION: '0.9.0'\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new _roslib2.default.Vector3({\n    x: rosX,\n    y: rosY\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new _roslib2.default.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n\n  // subscribe to the topic\n  var rosTopic = new _roslib2.default.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/MapMetaData'\n  });\n\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe();\n\n    // create the image\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image\n    });\n    that.rootObject.addChild(that.currentImage);\n    // work-around for a bug in easeljs -- needs a second object to render correctly\n    that.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n    that.emit('change');\n  });\n};\nROS2D.ImageMapClient.prototype.__proto__ = _eventemitter2.default.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message;\n\n  // internal drawing canvas\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  // save the metadata we need\n  this.pose = new _roslib2.default.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n\n  var imageData = context.createImageData(this.width, this.height);\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width;\n      // determine the value\n      var data = message.data[mapI];\n      var val;\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      }\n\n      // determine the index into the image data array\n      var i = (col + row * this.width) * 4;\n      // r\n      imageData.data[i] = val;\n      // g\n      imageData.data[++i] = val;\n      // b\n      imageData.data[++i] = val;\n      // a\n      imageData.data[++i] = 255;\n    }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n\n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n  // subscribe to the topic\n  var rosTopic = new _roslib2.default.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/OccupancyGrid',\n    compression: 'png'\n  });\n\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n\n    that.emit('change');\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = _eventemitter2.default.prototype;\n\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n  // Setting up to the service\n  var rosService = new _roslib2.default.Service({\n    ros: ros,\n    name: service,\n    serviceType: 'nav_msgs/GetMap',\n    compression: 'png'\n  });\n\n  rosService.callService(new _roslib2.default.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n\n    that.emit('change', that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = _eventemitter2.default.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n\n  var headLen = size / 3.0;\n  var headWidth = headLen * 2.0 / 3.0;\n\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001;\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n  graphics.endFill();\n  graphics.endStroke();\n  // create the shape\n  createjs.Shape.call(this, graphics);\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image_src;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n\n  var originals = {};\n  var image = new Image();\n\n  var paintImage = function paintImage() {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals['rotation'] = that.rotation;\n    Object.defineProperty(that, 'rotation', {\n      get: function get() {\n        return originals['rotation'] + 90;\n      },\n      set: function set(value) {\n        originals['rotation'] = value;\n      }\n    });\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.020;\n      createjs.Ticker.addEventListener('tick', function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n\n  var calculateScale = function calculateScale(_size) {\n    return _size / image.width;\n  };\n\n  image.src = image_url;\n  image.onload = paintImage;\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\n  // draw the line\n  this.graphics = new createjs.Graphics();\n\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n\n  // create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\nROS2D.PolygonMarker = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack;\n\n  // Array of point shapes\n  //\tthis.points = [];\n  this.pointContainer = new createjs.Container();\n\n  // Array of line shapes\n  //\tthis.lines = [];\n  this.lineContainer = new createjs.Container();\n\n  this.fillShape = new createjs.Shape();\n\n  // Container with all the lines and points\n  createjs.Container.call(this);\n\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createLineShape = function (startPoint, endPoint) {\n  var line = new createjs.Shape();\n  //\tline.graphics.setStrokeStyle(this.strokeSize);\n  //\tline.graphics.beginStroke(this.strokeColor);\n  //\tline.graphics.moveTo(startPoint.x, startPoint.y);\n  //\tline.graphics.lineTo(endPoint.x, endPoint.y);\n  this.editLineShape(line, startPoint, endPoint);\n\n  var that = this;\n  line.addEventListener('mousedown', function (event) {\n    if (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n      that.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n    }\n  });\n\n  return line;\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.editLineShape = function (line, startPoint, endPoint) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n\n  var that = this;\n  point.addEventListener('mousedown', function (event) {\n    if (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n      that.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n    }\n  });\n\n  return point;\n};\n\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren();\n\n  // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {\n    // Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(this.pointContainer.getChildAt(numPoints - 2), point);\n    this.lineContainer.addChild(line);\n  }\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(this.lineContainer.getChildAt(numPoints - 2), this.pointContainer.getChildAt(numPoints - 2), point);\n  }\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n    this.lineContainer.addChild(lineEnd);\n  }\n\n  this.drawFill();\n};\n\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index;\n  //\tvar point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    //\t\tpoint = obj;\n  } else {\n    index = obj;\n    //\t\tpoint = this.pointContainer.getChildAt(index);\n  }\n\n  // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints < 2) {} else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index + 1) % numPoints));\n    this.lineContainer.removeChildAt(index);\n  }\n  this.pointContainer.removeChildAt(index);\n  //\tthis.points.splice(index, 1);\n\n  this.drawFill();\n};\n\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n  point.x = newPos.x;\n  point.y = -newPos.y;\n\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints);\n    this.editLineShape(line1, this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), point);\n\n    // line after moved point\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(line2, point, this.pointContainer.getChildAt((index + 1) % numPoints));\n  }\n\n  this.drawFill();\n};\n\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new _roslib2.default.Vector3({ x: xh, y: -yh });\n\n  // Add a point in the center of the line to split\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints;\n\n  // Add a line between the new point and the end of the line to split\n  var lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index + 2) % numPoints));\n  this.lineContainer.addChildAt(lineNew, index + 1);\n\n  // Set the endpoint of the line to split to the new point\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n\n  this.drawFill();\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n    }\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\nROS2D.TraceShape = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05;\n\n  // Store minDist as the square of it\n  this.minDist = this.minDist * this.minDist;\n\n  // Array of the poses\n  // TODO: do we need this?\n  this.poses = [];\n\n  // Create the graphics\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor);\n\n  // Add first pose if given\n  if (pose !== null && typeof pose !== 'undefined') {\n    this.poses.push(pose);\n  }\n\n  // Create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n      this.poses.push(pose);\n    }\n  }\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n\n/**\n * Removes front pose and updates the graphics\n */\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift();\n    // TODO: shift drawing instructions rather than doing it all over\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n    }\n  }\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.startPos = new _roslib2.default.Vector3();\n};\n\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || '#111111';\n\n  // create the canvas to render to\n  var canvas = document.createElement('canvas');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n};\n\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n\n  // save scene scaling\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n};\n\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x -= x * this.scene.scaleX;\n  this.scene.y += y * this.scene.scaleY;\n};\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.center = new _roslib2.default.Vector3();\n  this.startShift = new _roslib2.default.Vector3();\n  this.startScale = new _roslib2.default.Vector3();\n};\n\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n\n  this.stage.x = this.startShift.x - (this.center.x - this.startShift.x) * (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y = this.startShift.y - (this.center.y - this.startShift.y) * (this.stage.scaleY / this.startScale.y - 1);\n};\n\nexports.default = ROS2D;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}