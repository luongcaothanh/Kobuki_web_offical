{"ast":null,"code":"import 'latest-createjs';\nimport ROSLIB from 'roslib';\nimport EventEmitter2 from 'eventemitter2';\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION: '0.9.0'\n}; // convert the given global Stage coordinates to ROS coordinates\n\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x: rosX,\n    y: rosY\n  });\n}; // convert the given ROS coordinates to global Stage coordinates\n\n\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y\n  };\n}; // convert a ROS quaternion to theta in degrees\n\n\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z; // Canvas rotation is clock wise and in degrees\n\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\n\n\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image; // save the metadata we need\n\n  this.pose = new ROSLIB.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation\n  }); // set the size\n\n  this.width = message.width;\n  this.height = message.height; // create the bitmap\n\n  createjs.Bitmap.call(this, image); // change Y direction\n\n  this.y = -this.height * message.resolution; // scale the image\n\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY; // set the pose\n\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\n\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\n\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container(); // create an empty shape to start with\n\n  this.currentImage = new createjs.Shape(); // subscribe to the topic\n\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/MapMetaData'\n  });\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe(); // create the image\n\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image\n    });\n    that.rootObject.addChild(that.currentImage); // work-around for a bug in easeljs -- needs a second object to render correctly\n\n    that.rootObject.addChild(new ROS2D.Grid({\n      size: 1\n    }));\n    that.emit('change');\n  });\n};\n\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\n\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message; // internal drawing canvas\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d'); // save the metadata we need\n\n  this.pose = new ROSLIB.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation\n  }); // set the size\n\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n  var imageData = context.createImageData(this.width, this.height);\n\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width; // determine the value\n\n      var data = message.data[mapI];\n      var val;\n\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      } // determine the index into the image data array\n\n\n      var i = (col + row * this.width) * 4; // r\n\n      imageData.data[i] = val; // if (options.isCostmap) {\n      //   imageData.data[i] = 255;\n      // }\n      // g\n\n      imageData.data[++i] = val; // b\n\n      imageData.data[++i] = val; // a\n\n      imageData.data[++i] = 255;\n    }\n  }\n\n  context.putImageData(imageData, 0, 0); // create the bitmap\n\n  createjs.Bitmap.call(this, canvas); // change Y direction\n\n  this.y = -this.height * message.info.resolution; // scale the image\n\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY; // set the pose\n\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n  this.alpha = options.alpha || 1;\n};\n\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\n\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container(); // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid); // work-around for a bug in easeljs -- needs a second object to render correctly\n\n  this.rootObject.addChild(new ROS2D.Grid({\n    size: 1\n  }));\n  this.currentGridCostmap = new createjs.Shape();\n  this.rootObject.addChild(this.currentGridCostmap); // subscribe to the topic\n\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/OccupancyGrid',\n    compression: 'png'\n  });\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message\n    });\n\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n\n    that.emit('change'); // check if we should unsubscribe\n\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  }); // subscribe to the topic\n  // var rosTopicCostmap = new ROSLIB.Topic({\n  //   ros: ros,\n  //   name: topic_costmap,\n  //   messageType: 'nav_msgs/OccupancyGrid',\n  //   compression: 'png'\n  // });\n  // rosTopicCostmap.subscribe(function (message) {\n  //   // check for an old map\n  //   var index = null;\n  //   if (that.currentGridCostmap) {\n  //     index = that.rootObject.getChildIndex(that.currentGridCostmap);\n  //     that.rootObject.removeChild(that.currentGridCostmap);\n  //   }\n  //   that.currentGridCostmap = new ROS2D.OccupancyGrid({\n  //     message: message,\n  //     alpha: 0.3,\n  //     isCostmap: true,\n  //   });\n  //   if (index !== null) {\n  //     that.rootObject.addChildAt(that.currentGridCostmap, index);\n  //   } else {\n  //     that.rootObject.addChild(that.currentGridCostmap);\n  //   }\n  //   // that.emit('change');\n  //   // check if we should unsubscribe\n  //   if (!that.continuous) {\n  //     rosTopicCostmap.unsubscribe();\n  //   }\n  // });\n};\n\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\n\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container(); // current grid that is displayed\n\n  this.currentGrid = null; // Setting up to the service\n\n  var rosService = new ROSLIB.Service({\n    ros: ros,\n    name: service,\n    serviceType: 'nav_msgs/GetMap',\n    compression: 'png'\n  });\n  rosService.callService(new ROSLIB.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n    that.emit('change', that.currentGrid);\n  });\n};\n\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\n\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse; // draw the arrow\n\n  var graphics = new createjs.Graphics();\n  var headLen = size / 3.0;\n  var headWidth = headLen * 2.0 / 3.0;\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke(); // create the shape\n\n  createjs.Shape.call(this, graphics); // check if we are pulsing\n\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\n\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\n\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001; // draw the arrow\n\n  var graphics = new createjs.Graphics(); // line width\n\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n\n  graphics.endFill();\n  graphics.endStroke(); // create the shape\n\n  createjs.Shape.call(this, graphics);\n};\n\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\n\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse; // draw the arrow\n\n  var graphics = new createjs.Graphics(); // line width\n\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke(); // create the shape\n\n  createjs.Shape.call(this, graphics); // check if we are pulsing\n\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\n\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\n\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n  var onload = options.onload || false;\n  var originals = {};\n\n  var paintImage = function paintImage() {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals['rotation'] = that.rotation;\n    Object.defineProperty(that, 'rotation', {\n      get: function get() {\n        return originals['rotation'] + 90;\n      },\n      set: function set(value) {\n        originals['rotation'] = value;\n      }\n    });\n\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.005;\n      createjs.Ticker.addEventListener('tick', function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n\n  var calculateScale = function calculateScale(_size) {\n    return _size / image.width;\n  };\n\n  var image = new Image();\n  image.src = image_url;\n\n  if (onload == true) {\n    image.onload = paintImage;\n  } else {\n    paintImage();\n  }\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\n\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0); // draw the line\n\n  this.graphics = new createjs.Graphics();\n\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n\n    this.graphics.endStroke();\n  } // create the shape\n\n\n  createjs.Shape.call(this, this.graphics);\n};\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\n\n\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n\n    this.graphics.endStroke();\n  }\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\n\nROS2D.PolygonMarker = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack; // Array of point shapes\n  //\tthis.points = [];\n\n  this.pointContainer = new createjs.Container(); // Array of line shapes\n  //\tthis.lines = [];\n\n  this.lineContainer = new createjs.Container();\n  this.fillShape = new createjs.Shape(); // Container with all the lines and points\n\n  createjs.Container.call(this);\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.createLineShape = function (startPoint, endPoint) {\n  var line = new createjs.Shape(); //\tline.graphics.setStrokeStyle(this.strokeSize);\n  //\tline.graphics.beginStroke(this.strokeColor);\n  //\tline.graphics.moveTo(startPoint.x, startPoint.y);\n  //\tline.graphics.lineTo(endPoint.x, endPoint.y);\n\n  this.editLineShape(line, startPoint, endPoint);\n  var that = this;\n  line.addEventListener('mousedown', function (event) {\n    if (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n      that.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n    }\n  });\n  return line;\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.editLineShape = function (line, startPoint, endPoint) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n  var that = this;\n  point.addEventListener('mousedown', function (event) {\n    if (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n      that.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n    }\n  });\n  return point;\n};\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\n\n\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren(); // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {// Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(this.pointContainer.getChildAt(numPoints - 2), point);\n    this.lineContainer.addChild(line);\n  }\n\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(this.lineContainer.getChildAt(numPoints - 2), this.pointContainer.getChildAt(numPoints - 2), point);\n  }\n\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n    this.lineContainer.addChild(lineEnd);\n  }\n\n  this.drawFill();\n};\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\n\n\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index; //\tvar point;\n\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj); //\t\tpoint = obj;\n  } else {\n    index = obj; //\t\tpoint = this.pointContainer.getChildAt(index);\n  } // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints < 2) {} else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index + 1) % numPoints));\n    this.lineContainer.removeChildAt(index);\n  }\n\n  this.pointContainer.removeChildAt(index); //\tthis.points.splice(index, 1);\n\n  this.drawFill();\n};\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\n\n\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n\n  point.x = newPos.x;\n  point.y = -newPos.y;\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints);\n    this.editLineShape(line1, this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), point); // line after moved point\n\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(line2, point, this.pointContainer.getChildAt((index + 1) % numPoints));\n  }\n\n  this.drawFill();\n};\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\n\n\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new ROSLIB.Vector3({\n    x: xh,\n    y: -yh\n  }); // Add a point in the center of the line to split\n\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints; // Add a line between the new point and the end of the line to split\n\n  var lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index + 2) % numPoints));\n  this.lineContainer.addChildAt(lineNew, index + 1); // Set the endpoint of the line to split to the new point\n\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n  this.drawFill();\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n    }\n\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\n\nROS2D.TraceShape = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05; // Store minDist as the square of it\n\n  this.minDist = this.minDist * this.minDist; // Array of the poses\n  // TODO: do we need this?\n\n  this.poses = []; // Create the graphics\n\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor); // Add first pose if given\n\n  if (pose !== null && typeof pose !== 'undefined') {\n    this.poses.push(pose);\n  } // Create the shape\n\n\n  createjs.Shape.call(this, this.graphics);\n};\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\n\n\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n      this.poses.push(pose);\n    }\n  }\n\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n/**\n * Removes front pose and updates the graphics\n */\n\n\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift(); // TODO: shift drawing instructions rather than doing it all over\n\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n    }\n  }\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\n\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject; // get a handle to the stage\n\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.startPos = new ROSLIB.Vector3();\n};\n\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\n\n\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || '#111111'; // create the canvas to render to\n\n  var canvas = document.createElement('canvas');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas); // create the easel to use\n\n  this.scene = new createjs.Stage(canvas); // change Y axis center\n\n  this.scene.y = this.height; // add the renderer to the page\n\n  document.getElementById(divID).appendChild(canvas); // update at 30fps\n\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n};\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\n\n\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\n\n\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y; // save scene scaling\n  //var scaleX = this.width / width;\n\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n};\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\n\n\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y; // shift scene by scaling the desired offset\n\n  this.scene.x -= x * this.scene.scaleX;\n  this.scene.y += y * this.scene.scaleY; //this.scene.y = 0;\n};\n\nROS2D.Viewer.prototype.fillFrame = function (width, height, x, y) {\n  // restore to values before shifting, if ocurred\n  // this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  // this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n  // save scene scaling\n  var scaleX = this.width / width;\n  this.scene.scaleX = scaleX;\n  this.scene.scaleY = scaleX; // save current offset\n\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y; // shift scene by scaling the desired offset\n\n  this.scene.x = -x * this.scene.scaleX;\n  this.scene.y = (height - y - 1) * this.scene.scaleY; // this.scene.y = 0;\n};\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\n\n\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001; // get a handle to the stage\n\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.center = new ROSLIB.Vector3();\n  this.startShift = new ROSLIB.Vector3();\n  this.startScale = new ROSLIB.Vector3();\n};\n\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n  this.stage.x = this.startShift.x - (this.center.x - this.startShift.x) * (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y = this.startShift.y - (this.center.y - this.startShift.y) * (this.stage.scaleY / this.startScale.y - 1);\n};\n\nexport default ROS2D;","map":{"version":3,"sources":["/home/luong/kobuki_web/react-nav2djs-0.0.3/package/es/vendor/ros2d.js"],"names":["ROSLIB","EventEmitter2","ROS2D","REVISION","createjs","Stage","prototype","globalToRos","x","y","rosX","scaleX","rosY","scaleY","Vector3","rosToGlobal","pos","rosQuaternionToGlobalTheta","orientation","q0","w","q1","q2","q3","z","Math","atan2","PI","ImageMap","options","message","image","pose","Pose","position","origin","width","height","Bitmap","call","resolution","__proto__","ImageMapClient","that","ros","topic","rootObject","Container","currentImage","Shape","rosTopic","Topic","name","messageType","subscribe","unsubscribe","addChild","Grid","size","emit","OccupancyGrid","canvas","document","createElement","context","getContext","info","imageData","createImageData","row","col","mapI","data","val","i","putImageData","alpha","OccupancyGridClient","continuous","currentGrid","currentGridCostmap","compression","index","getChildIndex","removeChild","addChildAt","OccupancyGridSrvClient","service","rosService","Service","serviceType","callService","ServiceRequest","response","map","ArrowShape","strokeSize","strokeColor","Graphics","getRGB","fillColor","pulse","graphics","headLen","headWidth","setStrokeStyle","beginStroke","moveTo","lineTo","beginFill","closePath","endFill","endStroke","growCount","growing","Ticker","addEventListener","cellSize","lineWidth","NavigationArrow","NavigationImage","image_url","onload","originals","paintImage","scale","calculateScale","regY","regX","rotation","Object","defineProperty","get","set","value","SCALE_SIZE","_size","Image","src","PathShape","path","poses","length","setPath","clear","PolygonMarker","lineSize","lineColor","pointSize","pointColor","lineCallBack","pointCallBack","pointContainer","lineContainer","fillShape","createLineShape","startPoint","endPoint","line","editLineShape","event","target","createPointShape","point","drawCircle","addPoint","numPoints","getNumChildren","getChildAt","lineEnd","drawFill","remPoint","obj","removeAllChildren","removeChildAt","movePoint","newPos","line1","line2","splitLine","xs","ys","xe","ye","xh","yh","lineNew","g","TraceShape","maxPoses","minDist","push","addPose","last","prevX","prevY","dx","dy","popFront","shift","PanView","stage","getStage","startPos","startPan","startX","startY","pan","curX","curY","Viewer","divID","background","style","getElementById","appendChild","scene","setFPS","addObject","object","scaleToDimensions","x_prev_shift","y_prev_shift","fillFrame","ZoomView","minScale","center","startShift","startScale","startZoom","centerX","centerY","zoom"],"mappings":"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","sourcesContent":["import 'latest-createjs';\nimport ROSLIB from 'roslib';\nimport EventEmitter2 from 'eventemitter2';\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION: '0.9.0'\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x: rosX,\n    y: rosY\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/MapMetaData'\n  });\n\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe();\n\n    // create the image\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image\n    });\n    that.rootObject.addChild(that.currentImage);\n    // work-around for a bug in easeljs -- needs a second object to render correctly\n    that.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n    that.emit('change');\n  });\n};\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message;\n\n  // internal drawing canvas\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n\n  var imageData = context.createImageData(this.width, this.height);\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width;\n      // determine the value\n      var data = message.data[mapI];\n      var val;\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      }\n\n      // determine the index into the image data array\n      var i = (col + row * this.width) * 4;\n      // r\n      imageData.data[i] = val;\n      // if (options.isCostmap) {\n      //   imageData.data[i] = 255;\n      // }\n      // g\n      imageData.data[++i] = val;\n      // b\n      imageData.data[++i] = val;\n      // a\n      imageData.data[++i] = 255;\n    }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n\n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n  this.alpha = options.alpha || 1;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n  this.currentGridCostmap = new createjs.Shape();\n  this.rootObject.addChild(this.currentGridCostmap);\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/OccupancyGrid',\n    compression: 'png'\n  });\n\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n\n    that.emit('change');\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n\n  // subscribe to the topic\n  // var rosTopicCostmap = new ROSLIB.Topic({\n  //   ros: ros,\n  //   name: topic_costmap,\n  //   messageType: 'nav_msgs/OccupancyGrid',\n  //   compression: 'png'\n  // });\n\n  // rosTopicCostmap.subscribe(function (message) {\n  //   // check for an old map\n  //   var index = null;\n  //   if (that.currentGridCostmap) {\n  //     index = that.rootObject.getChildIndex(that.currentGridCostmap);\n  //     that.rootObject.removeChild(that.currentGridCostmap);\n  //   }\n\n  //   that.currentGridCostmap = new ROS2D.OccupancyGrid({\n  //     message: message,\n  //     alpha: 0.3,\n  //     isCostmap: true,\n  //   });\n  //   if (index !== null) {\n  //     that.rootObject.addChildAt(that.currentGridCostmap, index);\n  //   } else {\n  //     that.rootObject.addChild(that.currentGridCostmap);\n  //   }\n\n  //   // that.emit('change');\n\n  //   // check if we should unsubscribe\n  //   if (!that.continuous) {\n  //     rosTopicCostmap.unsubscribe();\n  //   }\n  // });\n\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n  // Setting up to the service\n  var rosService = new ROSLIB.Service({\n    ros: ros,\n    name: service,\n    serviceType: 'nav_msgs/GetMap',\n    compression: 'png'\n  });\n\n  rosService.callService(new ROSLIB.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n\n    that.emit('change', that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n\n  var headLen = size / 3.0;\n  var headWidth = headLen * 2.0 / 3.0;\n\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001;\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n  graphics.endFill();\n  graphics.endStroke();\n  // create the shape\n  createjs.Shape.call(this, graphics);\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n  var onload = options.onload || false;\n\n  var originals = {};\n\n  var paintImage = function paintImage() {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals['rotation'] = that.rotation;\n    Object.defineProperty(that, 'rotation', {\n      get: function get() {\n        return originals['rotation'] + 90;\n      },\n      set: function set(value) {\n        originals['rotation'] = value;\n      }\n    });\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.005;\n      createjs.Ticker.addEventListener('tick', function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n\n  var calculateScale = function calculateScale(_size) {\n    return _size / image.width;\n  };\n\n  var image = new Image();\n  image.src = image_url;\n  if (onload == true) {\n    image.onload = paintImage;\n  } else {\n    paintImage();\n  }\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\n  // draw the line\n  this.graphics = new createjs.Graphics();\n\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n\n  // create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n    this.graphics.endStroke();\n  }\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\nROS2D.PolygonMarker = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack;\n\n  // Array of point shapes\n  //\tthis.points = [];\n  this.pointContainer = new createjs.Container();\n\n  // Array of line shapes\n  //\tthis.lines = [];\n  this.lineContainer = new createjs.Container();\n\n  this.fillShape = new createjs.Shape();\n\n  // Container with all the lines and points\n  createjs.Container.call(this);\n\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createLineShape = function (startPoint, endPoint) {\n  var line = new createjs.Shape();\n  //\tline.graphics.setStrokeStyle(this.strokeSize);\n  //\tline.graphics.beginStroke(this.strokeColor);\n  //\tline.graphics.moveTo(startPoint.x, startPoint.y);\n  //\tline.graphics.lineTo(endPoint.x, endPoint.y);\n  this.editLineShape(line, startPoint, endPoint);\n\n  var that = this;\n  line.addEventListener('mousedown', function (event) {\n    if (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n      that.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n    }\n  });\n\n  return line;\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.editLineShape = function (line, startPoint, endPoint) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n\n  var that = this;\n  point.addEventListener('mousedown', function (event) {\n    if (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n      that.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n    }\n  });\n\n  return point;\n};\n\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren();\n\n  // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {\n    // Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(this.pointContainer.getChildAt(numPoints - 2), point);\n    this.lineContainer.addChild(line);\n  }\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(this.lineContainer.getChildAt(numPoints - 2), this.pointContainer.getChildAt(numPoints - 2), point);\n  }\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n    this.lineContainer.addChild(lineEnd);\n  }\n\n  this.drawFill();\n};\n\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index;\n  //\tvar point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    //\t\tpoint = obj;\n  } else {\n    index = obj;\n    //\t\tpoint = this.pointContainer.getChildAt(index);\n  }\n\n  // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints < 2) { } else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index + 1) % numPoints));\n    this.lineContainer.removeChildAt(index);\n  }\n  this.pointContainer.removeChildAt(index);\n  //\tthis.points.splice(index, 1);\n\n  this.drawFill();\n};\n\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n  point.x = newPos.x;\n  point.y = -newPos.y;\n\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints);\n    this.editLineShape(line1, this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), point);\n\n    // line after moved point\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(line2, point, this.pointContainer.getChildAt((index + 1) % numPoints));\n  }\n\n  this.drawFill();\n};\n\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new ROSLIB.Vector3({ x: xh, y: -yh });\n\n  // Add a point in the center of the line to split\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints;\n\n  // Add a line between the new point and the end of the line to split\n  var lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index + 2) % numPoints));\n  this.lineContainer.addChildAt(lineNew, index + 1);\n\n  // Set the endpoint of the line to split to the new point\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n\n  this.drawFill();\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n    }\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\nROS2D.TraceShape = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05;\n\n  // Store minDist as the square of it\n  this.minDist = this.minDist * this.minDist;\n\n  // Array of the poses\n  // TODO: do we need this?\n  this.poses = [];\n\n  // Create the graphics\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor);\n\n  // Add first pose if given\n  if (pose !== null && typeof pose !== 'undefined') {\n    this.poses.push(pose);\n  }\n\n  // Create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n      this.poses.push(pose);\n    }\n  }\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n\n/**\n * Removes front pose and updates the graphics\n */\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift();\n    // TODO: shift drawing instructions rather than doing it all over\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n    }\n  }\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.startPos = new ROSLIB.Vector3();\n};\n\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || '#111111';\n\n  // create the canvas to render to\n  var canvas = document.createElement('canvas');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n};\n\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n\n  // save scene scaling\n  //var scaleX = this.width / width;\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n};\n\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x -= x * this.scene.scaleX;\n  this.scene.y += y * this.scene.scaleY;\n  //this.scene.y = 0;\n};\n\nROS2D.Viewer.prototype.fillFrame = function (width, height, x, y) {\n  // restore to values before shifting, if ocurred\n  // this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  // this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n\n  // save scene scaling\n  var scaleX = this.width / width;\n  this.scene.scaleX = scaleX;\n  this.scene.scaleY = scaleX;\n\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x = -x * this.scene.scaleX;\n  this.scene.y = ((height - y - 1) * this.scene.scaleY);\n  // this.scene.y = 0;\n}\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.center = new ROSLIB.Vector3();\n  this.startShift = new ROSLIB.Vector3();\n  this.startScale = new ROSLIB.Vector3();\n};\n\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n\n  this.stage.x = this.startShift.x - (this.center.x - this.startShift.x) * (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y = this.startShift.y - (this.center.y - this.startShift.y) * (this.stage.scaleY / this.startScale.y - 1);\n};\n\nexport default ROS2D;"]},"metadata":{},"sourceType":"module"}