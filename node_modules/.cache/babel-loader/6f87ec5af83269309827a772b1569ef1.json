{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nrequire('latest-createjs');\n\nvar _ros2d = require('./ros2d');\n\nvar _ros2d2 = _interopRequireDefault(_ros2d);\n\nvar _roslib = require('roslib');\n\nvar _roslib2 = _interopRequireDefault(_roslib);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.navigator = null; // setup a client to get the map\n\n  var client = new _ros2d2.default.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    }); // scale the viewer to fit the map\n\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\n\n\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  this.imageRobot = options.imageRobot;\n  this.imageGoalArrow = options.imageGoalArrow;\n  this.imageStationArrow = options.imageStationArrow;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.command = options.command || 'none';\n  this.onAddStation = options.onAddStation;\n  this.onClickStation = options.onClickStation;\n  this.onSetGoal = options.onSetGoal;\n  this.stationName = options.stationName || 'NoName';\n  this.stationList = []; // setup the actionlib client\n\n  var actionClient = new _roslib2.default.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new _roslib2.default.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: 'map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send(); // create a marker for the goal\n\n    var goalMarker = new _ros2d2.default.NavigationImage({\n      size: 2,\n      image_src: that.imageGoalArrow,\n      alpha: 0.9\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  } // get a handle to the stage\n\n\n  var stage;\n\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  } // marker for the robot\n\n\n  this.robotMarker = new ROS2D.NavigationImage({\n    size: 0.5,\n    image: that.imageRobot,\n    alpha: 0.9\n  }); // wait for a pose to come in first\n\n  robotMarker.visible = false;\n  this.robotMarker.zIndex = 0;\n  this.rootObject.addChild(robotMarker);\n  var initScaleSet = false; // setup a listener for the robot pose\n\n  /*var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/Pose',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    robotMarker.x = pose.position.x;\n    robotMarker.y = -pose.position.y;\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    }\n     // change the angle\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n     robotMarker.visible = true;\n  });*/\n  // create a listener for the robot pose\n\n  var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/gazebo/model_states',\n    messageType: 'gazebo_msgs/ModelStates',\n    throttle_rate: 100\n  }); // subscribe to the topic and update the robot marker when a new message is received\n\n  poseListener.subscribe(function (message) {\n    // find the index of the robot in the model_states message\n    var index = message.name.indexOf('mobile_base');\n\n    if (index !== -1) {\n      // update the robot marker position and orientation\n      robotMarker.x = message.pose[index].position.x;\n      robotMarker.y = -message.pose[index].position.y;\n      robotMarker.rotation = stage.rosQuaternionToGlobalTheta(message.pose[index].orientation);\n      robotMarker.visible = true;\n    }\n  }); // withOrientation === true\n  // setup a click-and-point listener (with orientation)\n\n  var position = null;\n  var positionVec3 = null;\n  var thetaRadians = 0;\n  var thetaDegrees = 0;\n  var orientationMarker = null;\n  var mouseDown = false;\n  var xDelta = 0;\n  var yDelta = 0;\n\n  var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n    if (mouseState === 'down') {\n      // get position when mouse button is pressed down\n      position = stage.globalToRos(event.stageX, event.stageY);\n      positionVec3 = new _roslib2.default.Vector3(position);\n      mouseDown = true;\n    } else if (mouseState === 'move') {\n      // remove obsolete orientation marker\n      that.rootObject.removeChild(orientationMarker);\n\n      if (mouseDown === true) {\n        // if mouse button is held down:\n        // - get current mouse position\n        // - calulate direction between stored <position> and current position\n        // - place orientation marker\n        var currentPos = stage.globalToRos(event.stageX, event.stageY);\n        var currentPosVec3 = new _roslib2.default.Vector3(currentPos); // orientationMarker = new _ros2d2.default.NavigationImage({\n        //   size: 2,\n        //   image_src: that.imageGoalArrow,\n        //   alpha: 0.9,\n        // });\n\n        orientationMarker = new _ros2d2.default.NavigationArrow({\n          size: 25,\n          strokeSize: 1,\n          fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66)\n        });\n        xDelta = currentPosVec3.x - positionVec3.x;\n        yDelta = currentPosVec3.y - positionVec3.y;\n        thetaRadians = Math.atan2(xDelta, yDelta);\n        thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n        if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n          thetaDegrees += 270;\n        } else {\n          thetaDegrees -= 90;\n        }\n\n        orientationMarker.x = positionVec3.x;\n        orientationMarker.y = -positionVec3.y;\n        orientationMarker.rotation = thetaDegrees;\n        console.log(orientationMarker.x, orientationMarker.y, orientationMarker.rotation);\n        orientationMarker.scaleX = 1.0 / stage.scaleX;\n        orientationMarker.scaleY = 1.0 / stage.scaleY;\n        that.rootObject.addChild(orientationMarker);\n      }\n    } else if (mouseDown) {\n      // mouseState === 'up'\n      // if mouse button is released\n      // - get current mouse position (goalPos)\n      // - calulate direction between stored <position> and goal position\n      // - set pose with orientation\n      // - send goal\n      mouseDown = false;\n      var goalPos = stage.globalToRos(event.stageX, event.stageY);\n      var goalPosVec3 = new _roslib2.default.Vector3(goalPos);\n      xDelta = goalPosVec3.x - positionVec3.x;\n      yDelta = goalPosVec3.y - positionVec3.y;\n      thetaRadians = Math.atan2(xDelta, yDelta);\n\n      if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n        thetaRadians += 3 * Math.PI / 2;\n      } else {\n        thetaRadians -= Math.PI / 2;\n      }\n\n      var qz = Math.sin(-thetaRadians / 2.0);\n      var qw = Math.cos(-thetaRadians / 2.0);\n      var orientation = new _roslib2.default.Quaternion({\n        x: 0,\n        y: 0,\n        z: qz,\n        w: qw\n      });\n      var pose = new _roslib2.default.Pose({\n        position: positionVec3,\n        orientation: orientation\n      }); // send the goal\n\n      sendGoal(pose);\n    }\n  };\n\n  this.rootObject.addEventListener('stagemousedown', function (event) {\n    mouseEventHandler(event, 'down');\n  });\n  this.rootObject.addEventListener('stagemousemove', function (event) {\n    mouseEventHandler(event, 'move');\n  });\n  this.rootObject.addEventListener('stagemouseup', function (event) {\n    mouseEventHandler(event, 'up');\n  });\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\n\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.command = options.command || 'none';\n  var imageRobot = options.imageRobot;\n  var imageGoalArrow = options.imageGoalArrow;\n  var imageStationArrow = options.imageStationArrow;\n  this.navigator = null; // setup a client to get the map\n\n  var client = new _ros2d2.default.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: true,\n      imageRobot: imageRobot,\n      imageGoalArrow: imageGoalArrow,\n      imageStationArrow: imageStationArrow,\n      command: this.command,\n      onSetGoal: options.onSetGoal,\n      onAddStation: options.onAddStation,\n      onClickStation: options.onClickStation\n    }); // scale the viewer to fit the map\n\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setCommand = function (command) {\n  // this.command = command;\n  this.navigator.setCommand(command);\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setStationName = function (stationName) {\n  this.navigator.setStationName(stationName);\n};\n\nNAV2D.OccupancyGridClientNav.prototype.syncStation = function (station) {\n  this.navigator.syncStation(station);\n};\n\nexports.default = NAV2D;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/home/luong/kobuki_web/react-nav2djs-0.0.3/package/lib/vendor/nav2d.js"],"names":["exports","__esModule","require","_ros2d","_ros2d2","_interopRequireDefault","_roslib","_roslib2","obj","default","NAV2D","REVISION","ImageMapClientNav","options","that","ros","topic","image","serverName","actionName","rootObject","createjs","Container","viewer","withOrientation","navigator","client","ImageMapClient","on","Navigator","scaleToDimensions","currentImage","width","height","shift","pose","position","x","y","imageRobot","imageGoalArrow","imageStationArrow","command","onAddStation","onClickStation","onSetGoal","stationName","stationList","actionClient","ActionClient","sendGoal","goal","Goal","goalMessage","target_pose","header","frame_id","send","goalMarker","NavigationImage","size","image_src","alpha","rotation","stage","rosQuaternionToGlobalTheta","orientation","scaleX","scaleY","addChild","removeChild","Stage","getStage","robotMarker","ROS2D","visible","zIndex","initScaleSet","poseListener","Topic","name","messageType","throttle_rate","subscribe","message","index","indexOf","positionVec3","thetaRadians","thetaDegrees","orientationMarker","mouseDown","xDelta","yDelta","mouseEventHandler","event","mouseState","globalToRos","stageX","stageY","Vector3","currentPos","currentPosVec3","NavigationArrow","strokeSize","fillColor","Graphics","getRGB","Math","atan2","PI","console","log","goalPos","goalPosVec3","qz","sin","qw","cos","Quaternion","z","w","Pose","addEventListener","OccupancyGridClientNav","continuous","OccupancyGridClient","currentGrid","prototype","setCommand","setStationName","syncStation","station","module"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nrequire('latest-createjs');\n\nvar _ros2d = require('./ros2d');\n\nvar _ros2d2 = _interopRequireDefault(_ros2d);\n\nvar _roslib = require('roslib');\n\nvar _roslib2 = _interopRequireDefault(_roslib);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new _ros2d2.default.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  this.imageRobot = options.imageRobot;\n  this.imageGoalArrow = options.imageGoalArrow;\n  this.imageStationArrow = options.imageStationArrow;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.command = options.command || 'none';\n  this.onAddStation = options.onAddStation;\n  this.onClickStation = options.onClickStation;\n  this.onSetGoal = options.onSetGoal;\n  this.stationName = options.stationName || 'NoName';\n  this.stationList = [];\n\n  // setup the actionlib client\n  var actionClient = new _roslib2.default.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new _roslib2.default.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: 'map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n\n    // create a marker for the goal\n    var goalMarker = new _ros2d2.default.NavigationImage({\n      size: 2,\n      image_src: that.imageGoalArrow,\n      alpha: 0.9,\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  }\n\n  // get a handle to the stage\n  var stage;\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  }\n\n  // marker for the robot\n  this.robotMarker = new ROS2D.NavigationImage({\n    size: 0.5,\n    image: that.imageRobot,\n    alpha: 0.9,\n  });\n  // wait for a pose to come in first\n  robotMarker.visible = false;\n  this.robotMarker.zIndex = 0;\n  this.rootObject.addChild(robotMarker);\n  var initScaleSet = false;\n\n  // setup a listener for the robot pose\n  /*var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/Pose',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    robotMarker.x = pose.position.x;\n    robotMarker.y = -pose.position.y;\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    }\n\n    // change the angle\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n\n    robotMarker.visible = true;\n  });*/\n  \n  // create a listener for the robot pose\n  var poseListener = new _roslib2.default.Topic({\n    ros: ros,\n    name: '/gazebo/model_states',\n    messageType: 'gazebo_msgs/ModelStates',\n    throttle_rate: 100\n  });\n\n  // subscribe to the topic and update the robot marker when a new message is received\n  poseListener.subscribe(function (message) {\n    // find the index of the robot in the model_states message\n    var index = message.name.indexOf('mobile_base');\n    if (index !== -1) {\n      // update the robot marker position and orientation\n      robotMarker.x = message.pose[index].position.x;\n      robotMarker.y = -message.pose[index].position.y;\n      robotMarker.rotation = stage.rosQuaternionToGlobalTheta(message.pose[index].orientation);\n      robotMarker.visible = true;\n    }\n  });\n\n  // withOrientation === true\n  // setup a click-and-point listener (with orientation)\n  var position = null;\n  var positionVec3 = null;\n  var thetaRadians = 0;\n  var thetaDegrees = 0;\n  var orientationMarker = null;\n  var mouseDown = false;\n  var xDelta = 0;\n  var yDelta = 0;\n\n  var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n\n    if (mouseState === 'down') {\n      // get position when mouse button is pressed down\n      position = stage.globalToRos(event.stageX, event.stageY);\n      positionVec3 = new _roslib2.default.Vector3(position);\n      mouseDown = true;\n    } else if (mouseState === 'move') {\n      // remove obsolete orientation marker\n      that.rootObject.removeChild(orientationMarker);\n\n      if (mouseDown === true) {\n        // if mouse button is held down:\n        // - get current mouse position\n        // - calulate direction between stored <position> and current position\n        // - place orientation marker\n        var currentPos = stage.globalToRos(event.stageX, event.stageY);\n        var currentPosVec3 = new _roslib2.default.Vector3(currentPos);\n\n        // orientationMarker = new _ros2d2.default.NavigationImage({\n        //   size: 2,\n        //   image_src: that.imageGoalArrow,\n        //   alpha: 0.9,\n        // });\n        orientationMarker = new _ros2d2.default.NavigationArrow({\n          size: 25,\n          strokeSize: 1,\n          fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66),\n\n        });\n\n        xDelta = currentPosVec3.x - positionVec3.x;\n        yDelta = currentPosVec3.y - positionVec3.y;\n\n        thetaRadians = Math.atan2(xDelta, yDelta);\n\n        thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n        if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n          thetaDegrees += 270;\n        } else {\n          thetaDegrees -= 90;\n        }\n\n        orientationMarker.x = positionVec3.x;\n        orientationMarker.y = -positionVec3.y;\n        orientationMarker.rotation = thetaDegrees;\n        console.log(orientationMarker.x, orientationMarker.y, orientationMarker.rotation);\n        orientationMarker.scaleX = 1.0 / stage.scaleX;\n        orientationMarker.scaleY = 1.0 / stage.scaleY;\n\n        that.rootObject.addChild(orientationMarker);\n      }\n    } else if (mouseDown) {\n      // mouseState === 'up'\n      // if mouse button is released\n      // - get current mouse position (goalPos)\n      // - calulate direction between stored <position> and goal position\n      // - set pose with orientation\n      // - send goal\n      mouseDown = false;\n\n      var goalPos = stage.globalToRos(event.stageX, event.stageY);\n\n      var goalPosVec3 = new _roslib2.default.Vector3(goalPos);\n\n      xDelta = goalPosVec3.x - positionVec3.x;\n      yDelta = goalPosVec3.y - positionVec3.y;\n\n      thetaRadians = Math.atan2(xDelta, yDelta);\n\n      if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n        thetaRadians += 3 * Math.PI / 2;\n      } else {\n        thetaRadians -= Math.PI / 2;\n      }\n\n      var qz = Math.sin(-thetaRadians / 2.0);\n      var qw = Math.cos(-thetaRadians / 2.0);\n\n      var orientation = new _roslib2.default.Quaternion({ x: 0, y: 0, z: qz, w: qw });\n\n      var pose = new _roslib2.default.Pose({\n        position: positionVec3,\n        orientation: orientation\n      });\n      // send the goal\n      sendGoal(pose);\n    }\n  };\n\n  this.rootObject.addEventListener('stagemousedown', function (event) {\n    mouseEventHandler(event, 'down');\n  });\n\n  this.rootObject.addEventListener('stagemousemove', function (event) {\n    mouseEventHandler(event, 'move');\n  });\n\n  this.rootObject.addEventListener('stagemouseup', function (event) {\n    mouseEventHandler(event, 'up');\n  });\n\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.command = options.command || 'none';\n  var imageRobot = options.imageRobot;\n  var imageGoalArrow = options.imageGoalArrow;\n  var imageStationArrow = options.imageStationArrow;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new _ros2d2.default.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: true,\n      imageRobot: imageRobot,\n      imageGoalArrow: imageGoalArrow,\n      imageStationArrow: imageStationArrow,\n      command: this.command,\n      onSetGoal: options.onSetGoal,\n      onAddStation: options.onAddStation,\n      onClickStation: options.onClickStation,\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setCommand = function (command) {\n  // this.command = command;\n  this.navigator.setCommand(command);\n}\n\nNAV2D.OccupancyGridClientNav.prototype.setStationName = function (stationName) {\n  this.navigator.setStationName(stationName);\n}\n\nNAV2D.OccupancyGridClientNav.prototype.syncStation = function (station) {\n  this.navigator.syncStation(station);\n}\n\nexports.default = NAV2D;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}