{"ast":null,"code":"import 'latest-createjs';\nimport ROS2D from './ros2d';\nimport ROSLIB from 'roslib';\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.navigator = null; // setup a client to get the map\n\n  var client = new ROS2D.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    }); // scale the viewer to fit the map\n\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\n\n\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  this.imageRobot = options.imageRobot;\n  this.imageGoalArrow = options.imageGoalArrow;\n  this.imageStationArrow = options.imageStationArrow;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.command = options.command || 'none';\n  this.onAddStation = options.onAddStation;\n  this.onClickStation = options.onClickStation;\n  this.onSetGoal = options.onSetGoal;\n  this.stationName = options.stationName || 'NoName';\n  this.stationList = []; // setup the actionlib client\n\n  var actionClient = new ROSLIB.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new ROSLIB.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: '/map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send(); // create a marker for the goal\n\n    var goalMarker = new ROS2D.NavigationImage({\n      size: 0.5,\n      image: that.imageGoalArrow,\n      alpha: 0.9\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  } // get a handle to the stage\n\n\n  var stage;\n\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  } // marker for the robot\n\n\n  this.robotMarker = new ROS2D.NavigationImage({\n    size: 2,\n    image: that.imageRobot,\n    alpha: 0.9\n  }); // wait for a pose to come in first\n\n  this.robotMarker.visible = false;\n  this.robotMarker.zIndex = 0;\n  this.rootObject.addChild(this.robotMarker);\n  var initScaleSet = false; // setup a listener for the robot pose\n  // var sortBy = function(a, b) { return b.zIndex - a.zIndex; };\n  // var poseListener = new ROSLIB.Topic({\n  //   ros: ros,\n  //   name: '/robot_pose',\n  //   messageType: 'geometry_msgs/PoseStamped',\n  //   throttle_rate: 100\n  // });\n  // poseListener.subscribe(function (pose) {\n  //   // update the robots position on the map\n  //   pose = pose.pose;\n  //   // console.log(pose.position.x);\n  //   that.robotMarker.x = pose.position.x;\n  //   that.robotMarker.y = -pose.position.y;\n  //   // change the angle\n  //   that.robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n  //   that.robotMarker.visible = true;\n  //   // that.rootObject.setChildIndex(that.rootObject.numChildren());\n  // });\n  // create a listener for the robot pose\n\n  var poseListener = new ROSLIB.Topic({\n    ros: ros,\n    name: '/gazebo/model_states',\n    messageType: 'gazebo_msgs/ModelStates',\n    throttle_rate: 100\n  }); // subscribe to the topic and update the robot marker when a new message is received\n\n  poseListener.subscribe(function (message) {\n    // find the index of the robot in the model_states message\n    var index = message.name.indexOf('mobile_base');\n\n    if (index !== -1) {\n      // update the robot marker position and orientation\n      that.robotMarker.x = message.pose[index].position.x;\n      that.robotMarker.y = -message.pose[index].position.y;\n      that.robotMarker.rotation = stage.rosQuaternionToGlobalTheta(message.pose[index].orientation);\n      that.robotMarker.visible = true;\n    }\n  }); // withOrientation === true\n  // setup a click-and-point listener (with orientation)\n\n  var position = null;\n  var positionVec3 = null;\n  var thetaRadians = 0;\n  var thetaDegrees = 0;\n  var mouseDown = false;\n  var mouseMove = false;\n  var xDelta = 0;\n  var yDelta = 0;\n  var zi = 1;\n  this.orientationMarkerGoal = new ROS2D.NavigationImage({\n    size: 2,\n    image: that.imageGoalArrow,\n    alpha: 0.8,\n    pulse: true,\n    onload: true\n  });\n  this.orientationMarkerGoal.visible = false;\n  var orientationMarkerStation = null; // orientationMarkerStation.visible = false;\n\n  var targetMarker = this.orientationMarkerGoal;\n\n  var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n    if (mouseState === 'down') {\n      // get position when mouse button is pressed down\n      position = stage.globalToRos(event.stageX, event.stageY);\n      positionVec3 = new ROSLIB.Vector3(position);\n      mouseDown = true;\n      mouseMove = false;\n\n      if (that.command == 'SetGoal') {\n        targetMarker = that.orientationMarkerGoal;\n      } else if (that.command == 'AddStation') {\n        orientationMarkerStation = new ROS2D.NavigationImage({\n          size: 2,\n          image: that.imageStationArrow,\n          alpha: 0.8,\n          pulse: true,\n          onload: true\n        });\n        targetMarker = orientationMarkerStation;\n      } else {\n        mouseDown = false;\n        var currentPos = stage.globalToRos(event.stageX, event.stageY);\n        var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n        currentPosVec3.y *= -1;\n        var targetIndex = -1;\n        that.stationList.forEach((item, index) => {\n          if (Math.abs(currentPosVec3.x - item.marker.x) < 0.2 && Math.abs(currentPosVec3.y - item.marker.y) < 0.2) {\n            // if (that.command == 'DeleteStation') {\n            //   that.rootObject.removeChild(item.marker);\n            //   that.rootObject.removeChild(item.label);\n            //   targetIndex = index;\n            // }\n            if (that.onClickStation) {\n              that.onClickStation(item.info.id);\n            }\n          }\n        });\n\n        if (targetIndex >= 0) {\n          that.stationList.splice(targetIndex, 1);\n        }\n\n        return;\n      }\n    } else if (mouseDown && mouseState === 'move') {\n      // remove obsolete orientation marker\n      that.rootObject.removeChild(targetMarker);\n      mouseMove = true;\n      var currentPos = stage.globalToRos(event.stageX, event.stageY);\n      var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n      targetMarker.visible = true;\n      xDelta = currentPosVec3.x - positionVec3.x;\n      yDelta = currentPosVec3.y - positionVec3.y;\n      thetaRadians = Math.atan2(xDelta, yDelta);\n      thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n      if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n        thetaDegrees += 270;\n      } else {\n        thetaDegrees -= 90;\n      }\n\n      targetMarker.x = positionVec3.x;\n      targetMarker.y = -positionVec3.y;\n      targetMarker.rotation = thetaDegrees;\n      targetMarker.zIndex = zi;\n      zi++;\n      that.rootObject.addChildAt(targetMarker, that.rootObject.getChildIndex(that.robotMarker));\n    } else if (mouseDown && mouseState === 'up') {\n      mouseDown = false;\n      var goalPos = stage.globalToRos(event.stageX, event.stageY);\n      var goalPosVec3 = new ROSLIB.Vector3(goalPos);\n      xDelta = goalPosVec3.x - positionVec3.x;\n      yDelta = goalPosVec3.y - positionVec3.y;\n      thetaRadians = Math.atan2(xDelta, yDelta);\n\n      if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n        thetaRadians += 3 * Math.PI / 2;\n      } else {\n        thetaRadians -= Math.PI / 2;\n      }\n\n      var qz = Math.sin(-thetaRadians / 2.0);\n      var qw = Math.cos(-thetaRadians / 2.0);\n      var orientation = new ROSLIB.Quaternion({\n        x: 0,\n        y: 0,\n        z: qz,\n        w: qw\n      });\n      var pose = new ROSLIB.Pose({\n        position: positionVec3,\n        orientation: orientation\n      }); // send the goal\n      // sendGoal(pose);\n\n      if (mouseMove) {\n        mouseMove = false;\n\n        if (that.command == 'SetGoal') {\n          if (that.onSetGoal) {\n            that.onSetGoal(targetMarker, pose);\n          }\n        } else if (that.command == 'AddStation') {\n          /*\n                    var text = new createjs.Text(that.stationName, \"0.01rem Helvetica\", \"#ff7700\");\n                    text.x = targetMarker.x - text.getBounds().width / 2;\n                    text.y = targetMarker.y - 0.45;\n                    that.rootObject.removeChild(targetMarker);\n                    that.rootObject.addChildAt(text, that.rootObject.getChildIndex(this.robotMarker));\n                    var newStationItem = {\n                      marker: orientationMarkerStation,\n                      label: text,\n                    }\n                    stationList.push(newStationItem);\n          */\n          that.rootObject.removeChild(targetMarker);\n\n          if (that.onAddStation) {\n            // that.onAddStation({\n            //   name: that.stationName,\n            //   obj: targetMarker,\n            //   pose: pose,\n            //   degrees: thetaDegrees,\n            //   id: Date.now().toString(),\n            // });\n            let newStation = {\n              name: that.stationName,\n              positionX: pose.position.x,\n              positionY: pose.position.y,\n              positionZ: pose.position.z,\n              orientationX: pose.orientation.x,\n              orientationY: pose.orientation.y,\n              orientationZ: pose.orientation.z,\n              orientationW: pose.orientation.w,\n              id: Date.now().toString()\n            };\n            that.onAddStation(newStation);\n          }\n        }\n      }\n    }\n  };\n\n  this.rootObject.addEventListener('stagemousedown', function (event) {\n    mouseEventHandler(event, 'down');\n  });\n  this.rootObject.addEventListener('stagemousemove', function (event) {\n    mouseEventHandler(event, 'move');\n  });\n  this.rootObject.addEventListener('stagemouseup', function (event) {\n    mouseEventHandler(event, 'up');\n  }); // this.rootObject.addEventListener('dblclick', function (event) {\n  //   mouseEventHandler(event, 'dbclick');\n  // });\n};\n\nNAV2D.Navigator.prototype.setCommand = function (command) {\n  this.command = command;\n\n  if (this.command == 'CancelGoal') {\n    this.rootObject.removeChild(this.orientationMarkerGoal);\n  }\n};\n\nNAV2D.Navigator.prototype.setStationName = function (stationName) {\n  this.stationName = stationName;\n};\n\nNAV2D.Navigator.prototype.syncStation = function (station) {\n  for (var i = this.stationList.length - 1; i >= 0; i--) {\n    var del = true;\n\n    for (var j = 0; j < station.length; j++) {\n      if (this.stationList[i].info.id == station[j].id) {\n        del = false;\n      }\n    }\n\n    if (del) {\n      this.rootObject.removeChild(this.stationList[i].marker);\n      this.rootObject.removeChild(this.stationList[i].text);\n      this.stationList.splice(i, 1);\n    }\n  }\n\n  for (var i = station.length - 1; i >= 0; i--) {\n    var available = false;\n\n    for (var j = 0; j < this.stationList.length; j++) {\n      if (this.stationList[j].info.id == station[i].id) {\n        available = true;\n      }\n    }\n\n    if (available == false) {\n      var stationMarker = new ROS2D.NavigationImage({\n        size: 2,\n        image: this.imageStationArrow,\n        alpha: 0.8,\n        pulse: true\n      }); // get a handle to the stage\n\n      var stage;\n\n      if (this.rootObject instanceof createjs.Stage) {\n        stage = this.rootObject;\n      } else {\n        stage = this.rootObject.getStage();\n      }\n\n      var orientation = new ROSLIB.Quaternion({\n        x: station[i].orientationX,\n        y: station[i].orientationY,\n        z: station[i].orientationZ,\n        w: station[i].orientationW\n      });\n      stationMarker.x = station[i].positionX;\n      stationMarker.y = -station[i].positionY;\n      stationMarker.rotation = stage.rosQuaternionToGlobalTheta(orientation);\n      var text = new createjs.Text(station[i].name, \"0.05rem Helvetica\", \"#000000\");\n      text.x = stationMarker.x - text.getBounds().width / 2;\n      text.y = stationMarker.y - 2;\n      this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n      this.rootObject.addChildAt(text, this.rootObject.getChildIndex(this.robotMarker));\n      this.stationList.push({\n        info: station[i],\n        marker: stationMarker,\n        text: text\n      });\n    }\n  }\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\n\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.command = options.command || 'none';\n  var imageRobot = options.imageRobot;\n  var imageGoalArrow = options.imageGoalArrow;\n  var imageStationArrow = options.imageStationArrow;\n  this.navigator = null; // setup a client to get the map\n\n  var client = new ROS2D.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic\n  });\n  client.on('change', function () {\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n  that.navigator = new NAV2D.Navigator({\n    ros: that.ros,\n    serverName: that.serverName,\n    actionName: that.actionName,\n    rootObject: that.rootObject,\n    withOrientation: true,\n    imageRobot: imageRobot,\n    imageGoalArrow: imageGoalArrow,\n    imageStationArrow: imageStationArrow,\n    command: this.command,\n    onSetGoal: options.onSetGoal,\n    onAddStation: options.onAddStation,\n    onClickStation: options.onClickStation\n  });\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setCommand = function (command) {\n  this.navigator.setCommand(command);\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setStationName = function (stationName) {\n  this.navigator.setStationName(stationName);\n};\n\nNAV2D.OccupancyGridClientNav.prototype.syncStation = function (station) {\n  this.navigator.syncStation(station);\n};\n\nexport default NAV2D;","map":{"version":3,"sources":["/home/luong/kobuki_web/react-nav2djs-0.0.3/package/es/vendor/nav2d.js"],"names":["ROS2D","ROSLIB","NAV2D","REVISION","ImageMapClientNav","options","that","ros","topic","image","serverName","actionName","rootObject","createjs","Container","viewer","withOrientation","navigator","client","ImageMapClient","on","Navigator","scaleToDimensions","currentImage","width","height","shift","pose","position","x","y","imageRobot","imageGoalArrow","imageStationArrow","command","onAddStation","onClickStation","onSetGoal","stationName","stationList","actionClient","ActionClient","sendGoal","goal","Goal","goalMessage","target_pose","header","frame_id","send","goalMarker","NavigationImage","size","alpha","rotation","stage","rosQuaternionToGlobalTheta","orientation","scaleX","scaleY","addChild","removeChild","Stage","getStage","robotMarker","visible","zIndex","initScaleSet","poseListener","Topic","name","messageType","throttle_rate","subscribe","message","index","indexOf","positionVec3","thetaRadians","thetaDegrees","mouseDown","mouseMove","xDelta","yDelta","zi","orientationMarkerGoal","pulse","onload","orientationMarkerStation","targetMarker","mouseEventHandler","event","mouseState","globalToRos","stageX","stageY","Vector3","currentPos","currentPosVec3","targetIndex","forEach","item","Math","abs","marker","info","id","splice","atan2","PI","addChildAt","getChildIndex","goalPos","goalPosVec3","qz","sin","qw","cos","Quaternion","z","w","Pose","newStation","positionX","positionY","positionZ","orientationX","orientationY","orientationZ","orientationW","Date","now","toString","addEventListener","prototype","setCommand","setStationName","syncStation","station","i","length","del","j","text","available","stationMarker","Text","getBounds","push","OccupancyGridClientNav","continuous","OccupancyGridClient","currentGrid"],"mappings":"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","sourcesContent":["import 'latest-createjs';\nimport ROS2D from './ros2d';\nimport ROSLIB from 'roslib';\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new ROS2D.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  this.imageRobot = options.imageRobot;\n  this.imageGoalArrow = options.imageGoalArrow;\n  this.imageStationArrow = options.imageStationArrow;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.command = options.command || 'none';\n  this.onAddStation = options.onAddStation;\n  this.onClickStation = options.onClickStation;\n  this.onSetGoal = options.onSetGoal;\n  this.stationName = options.stationName || 'NoName';\n  this.stationList = [];\n\n  // setup the actionlib client\n  var actionClient = new ROSLIB.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new ROSLIB.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: '/map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n\n    // create a marker for the goal\n    var goalMarker = new ROS2D.NavigationImage({\n      size: 0.5,\n      image: that.imageGoalArrow,\n      alpha: 0.9,\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  }\n\n  // get a handle to the stage\n  var stage;\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  }\n\n  // marker for the robot\n  this.robotMarker = new ROS2D.NavigationImage({\n    size: 2,\n    image: that.imageRobot,\n    alpha: 0.9,\n  });\n  // wait for a pose to come in first\n  this.robotMarker.visible = false;\n  this.robotMarker.zIndex = 0;\n  this.rootObject.addChild(this.robotMarker);\n  var initScaleSet = false;\n\n  // setup a listener for the robot pose\n  // var sortBy = function(a, b) { return b.zIndex - a.zIndex; };\n  // var poseListener = new ROSLIB.Topic({\n  //   ros: ros,\n  //   name: '/robot_pose',\n  //   messageType: 'geometry_msgs/PoseStamped',\n  //   throttle_rate: 100\n  // });\n  // poseListener.subscribe(function (pose) {\n  //   // update the robots position on the map\n  //   pose = pose.pose;\n  //   // console.log(pose.position.x);\n  //   that.robotMarker.x = pose.position.x;\n  //   that.robotMarker.y = -pose.position.y;\n\n  //   // change the angle\n  //   that.robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n\n  //   that.robotMarker.visible = true;\n  //   // that.rootObject.setChildIndex(that.rootObject.numChildren());\n  // });\n\n  // create a listener for the robot pose\n  var poseListener = new ROSLIB.Topic({\n    ros: ros,\n    name: '/gazebo/model_states',\n    messageType: 'gazebo_msgs/ModelStates',\n    throttle_rate: 100\n  });\n\n  // subscribe to the topic and update the robot marker when a new message is received\n  poseListener.subscribe(function (message) {\n    // find the index of the robot in the model_states message\n    var index = message.name.indexOf('mobile_base');\n    if (index !== -1) {\n      // update the robot marker position and orientation\n      that.robotMarker.x = message.pose[index].position.x;\n      that.robotMarker.y = -message.pose[index].position.y;\n      that.robotMarker.rotation = stage.rosQuaternionToGlobalTheta(message.pose[index].orientation);\n      that.robotMarker.visible = true;\n    }\n  });\n\n\n  // withOrientation === true\n  // setup a click-and-point listener (with orientation)\n  var position = null;\n  var positionVec3 = null;\n  var thetaRadians = 0;\n  var thetaDegrees = 0;\n  var mouseDown = false;\n  var mouseMove = false;\n  var xDelta = 0;\n  var yDelta = 0;\n  var zi = 1;\n  this.orientationMarkerGoal = new ROS2D.NavigationImage({\n    size: 2,\n    image: that.imageGoalArrow,\n    alpha: 0.8,\n    pulse: true,\n    onload: true,\n  });\n  this.orientationMarkerGoal.visible = false;\n  var orientationMarkerStation = null;\n  // orientationMarkerStation.visible = false;\n  var targetMarker = this.orientationMarkerGoal;\n\n  var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n\n    if (mouseState === 'down') {\n      // get position when mouse button is pressed down\n      position = stage.globalToRos(event.stageX, event.stageY);\n      positionVec3 = new ROSLIB.Vector3(position);\n      mouseDown = true;\n      mouseMove = false;\n\n      if (that.command == 'SetGoal') {\n        targetMarker = that.orientationMarkerGoal;\n      } else if (that.command == 'AddStation') {\n        orientationMarkerStation = new ROS2D.NavigationImage({\n          size: 2,\n          image: that.imageStationArrow,\n          alpha: 0.8,\n          pulse: true,\n          onload: true,\n        });\n        targetMarker = orientationMarkerStation;\n      } else {\n        mouseDown = false;\n        var currentPos = stage.globalToRos(event.stageX, event.stageY);\n        var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n        currentPosVec3.y *= -1;\n        var targetIndex = -1;\n        that.stationList.forEach((item, index) => {\n          if (Math.abs(currentPosVec3.x - item.marker.x) < 0.2 && Math.abs(currentPosVec3.y - item.marker.y) < 0.2) {\n            // if (that.command == 'DeleteStation') {\n            //   that.rootObject.removeChild(item.marker);\n            //   that.rootObject.removeChild(item.label);\n            //   targetIndex = index;\n            // }\n            if (that.onClickStation) {\n              that.onClickStation(item.info.id);\n            }\n          }\n        });\n        if (targetIndex >= 0) {\n          that.stationList.splice(targetIndex, 1);\n        }\n        return;\n      }\n    } else if (mouseDown && mouseState === 'move') {\n      // remove obsolete orientation marker\n      that.rootObject.removeChild(targetMarker);\n      mouseMove = true;\n      var currentPos = stage.globalToRos(event.stageX, event.stageY);\n      var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n      targetMarker.visible = true;\n\n      xDelta = currentPosVec3.x - positionVec3.x;\n      yDelta = currentPosVec3.y - positionVec3.y;\n\n      thetaRadians = Math.atan2(xDelta, yDelta);\n\n      thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n      if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n        thetaDegrees += 270;\n      } else {\n        thetaDegrees -= 90;\n      }\n\n      targetMarker.x = positionVec3.x;\n      targetMarker.y = -positionVec3.y;\n      targetMarker.rotation = thetaDegrees;\n      targetMarker.zIndex = zi;\n      zi++;\n\n      that.rootObject.addChildAt(targetMarker, that.rootObject.getChildIndex(that.robotMarker));\n    } else if (mouseDown && mouseState === 'up') {\n      mouseDown = false;\n\n      var goalPos = stage.globalToRos(event.stageX, event.stageY);\n\n      var goalPosVec3 = new ROSLIB.Vector3(goalPos);\n\n      xDelta = goalPosVec3.x - positionVec3.x;\n      yDelta = goalPosVec3.y - positionVec3.y;\n\n      thetaRadians = Math.atan2(xDelta, yDelta);\n\n      if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n        thetaRadians += 3 * Math.PI / 2;\n      } else {\n        thetaRadians -= Math.PI / 2;\n      }\n\n      var qz = Math.sin(-thetaRadians / 2.0);\n      var qw = Math.cos(-thetaRadians / 2.0);\n\n      var orientation = new ROSLIB.Quaternion({ x: 0, y: 0, z: qz, w: qw });\n\n      var pose = new ROSLIB.Pose({\n        position: positionVec3,\n        orientation: orientation\n      });\n      // send the goal\n      // sendGoal(pose);\n      if (mouseMove) {\n        mouseMove = false;\n        if (that.command == 'SetGoal') {\n          if (that.onSetGoal) {\n            that.onSetGoal(targetMarker, pose);\n          }\n        } else if (that.command == 'AddStation') {\n/*\n          var text = new createjs.Text(that.stationName, \"0.01rem Helvetica\", \"#ff7700\");\n          text.x = targetMarker.x - text.getBounds().width / 2;\n          text.y = targetMarker.y - 0.45;\n          that.rootObject.removeChild(targetMarker);\n          that.rootObject.addChildAt(text, that.rootObject.getChildIndex(this.robotMarker));\n          var newStationItem = {\n            marker: orientationMarkerStation,\n            label: text,\n          }\n          stationList.push(newStationItem);\n*/\n          that.rootObject.removeChild(targetMarker);\n          if (that.onAddStation) {\n            // that.onAddStation({\n            //   name: that.stationName,\n            //   obj: targetMarker,\n            //   pose: pose,\n            //   degrees: thetaDegrees,\n            //   id: Date.now().toString(),\n            // });\n            let newStation = {\n              name: that.stationName,\n              positionX: pose.position.x,\n              positionY: pose.position.y,\n              positionZ: pose.position.z,\n              orientationX: pose.orientation.x,\n              orientationY: pose.orientation.y,\n              orientationZ: pose.orientation.z,\n              orientationW: pose.orientation.w,\n              id: Date.now().toString(),\n            }\n            that.onAddStation(newStation);\n          }\n        }\n      }\n    }\n  };\n\n  this.rootObject.addEventListener('stagemousedown', function (event) {\n    mouseEventHandler(event, 'down');\n  });\n\n  this.rootObject.addEventListener('stagemousemove', function (event) {\n    mouseEventHandler(event, 'move');\n  });\n\n  this.rootObject.addEventListener('stagemouseup', function (event) {\n    mouseEventHandler(event, 'up');\n  });\n\n  // this.rootObject.addEventListener('dblclick', function (event) {\n  //   mouseEventHandler(event, 'dbclick');\n  // });\n};\n\nNAV2D.Navigator.prototype.setCommand = function (command) {\n  this.command = command;\n  if (this.command == 'CancelGoal') {\n    this.rootObject.removeChild(this.orientationMarkerGoal);\n  }\n}\n\nNAV2D.Navigator.prototype.setStationName = function (stationName) {\n  this.stationName = stationName;\n}\n\nNAV2D.Navigator.prototype.syncStation = function (station) {\n  for (var i = this.stationList.length - 1; i >= 0; i--) {\n    var del = true;\n    for (var j = 0; j < station.length; j++) {\n      if (this.stationList[i].info.id == station[j].id) {\n        del = false;\n      }\n    }\n    if (del) {\n      this.rootObject.removeChild(this.stationList[i].marker);\n      this.rootObject.removeChild(this.stationList[i].text);\n      this.stationList.splice(i, 1);\n    }\n  }\n  for (var i = station.length - 1; i >= 0; i--) {\n    var available = false;\n    for (var j = 0; j < this.stationList.length; j++) {\n      if (this.stationList[j].info.id == station[i].id) {\n        available = true;\n      }\n    }\n    if (available == false) {\n\n      var stationMarker =  new ROS2D.NavigationImage({\n        size: 2,\n        image: this.imageStationArrow,\n        alpha: 0.8,\n        pulse: true,\n      });\n\n      // get a handle to the stage\n      var stage;\n      if (this.rootObject instanceof createjs.Stage) {\n        stage = this.rootObject;\n      } else {\n        stage = this.rootObject.getStage();\n      }\n\n      var orientation = new ROSLIB.Quaternion({\n        x: station[i].orientationX,\n        y: station[i].orientationY,\n        z: station[i].orientationZ,\n        w: station[i].orientationW\n      });\n\n      stationMarker.x = station[i].positionX;\n      stationMarker.y = -station[i].positionY;\n      stationMarker.rotation = stage.rosQuaternionToGlobalTheta(orientation);\n\n      var text = new createjs.Text(station[i].name, \"0.05rem Helvetica\", \"#000000\");\n      text.x = stationMarker.x - text.getBounds().width / 2;\n      text.y = stationMarker.y - 2;\n      this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n      this.rootObject.addChildAt(text, this.rootObject.getChildIndex(this.robotMarker));\n      this.stationList.push({\n        info: station[i],\n        marker: stationMarker,\n        text: text,\n      });\n    }\n  }\n}\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.command = options.command || 'none';\n  var imageRobot = options.imageRobot;\n  var imageGoalArrow = options.imageGoalArrow;\n  var imageStationArrow = options.imageStationArrow;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new ROS2D.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic,\n  });\n  client.on('change', function () {\n    that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n    that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n  });\n  that.navigator = new NAV2D.Navigator({\n    ros: that.ros,\n    serverName: that.serverName,\n    actionName: that.actionName,\n    rootObject: that.rootObject,\n    withOrientation: true,\n    imageRobot: imageRobot,\n    imageGoalArrow: imageGoalArrow,\n    imageStationArrow: imageStationArrow,\n    command: this.command,\n    onSetGoal: options.onSetGoal,\n    onAddStation: options.onAddStation,\n    onClickStation: options.onClickStation,\n  });\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setCommand = function (command) {\n  this.navigator.setCommand(command);\n}\n\nNAV2D.OccupancyGridClientNav.prototype.setStationName = function (stationName) {\n  this.navigator.setStationName(stationName);\n}\n\nNAV2D.OccupancyGridClientNav.prototype.syncStation = function (station) {\n  this.navigator.syncStation(station);\n}\n\nexport default NAV2D;"]},"metadata":{},"sourceType":"module"}