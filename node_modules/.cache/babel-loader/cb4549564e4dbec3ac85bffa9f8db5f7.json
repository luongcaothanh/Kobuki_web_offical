{"ast":null,"code":"var _jsxFileName = \"/home/luong/kobuki_web/src/components/Map/Map.js\";\nimport React, { Component } from \"react\";\nimport { Container, Card, Button, Form, Col, Row, Alert } from \"react-bootstrap\";\nimport ROSLIB from \"roslib\"; // import \"ros2d\";\n\nimport Nav2d from \"react-nav2djs\";\nimport \"./Map.css\";\nimport \"../CommonStyle.css\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.ros = props.ros || null;\n    this.state = {\n      command: 'none',\n      message: 'Robot is ready !',\n      stationName: 'NoName',\n      enableCancel: false,\n      stations: []\n    };\n    this.stationListLoad = [];\n    this.onAddStation = this.onAddStation.bind(this);\n    this.onClickStation = this.onClickStation.bind(this);\n    this.onSetGoal = this.onSetGoal.bind(this);\n    this.actionClient = null;\n    this.cancelAssignmentService = null;\n    this.InsertStationService = null;\n    this.DeleteStationService = null;\n    this.GetStationService = null;\n  }\n\n  componentDidMount() {\n    if (this.props.ros != null) {\n      this.ros = this.props.ros;\n      var serverName = this.props.serverName || '/move_base';\n      var actionName = this.props.actionName || 'move_base_msgs/MoveBaseAction';\n      this.actionClient = new ROSLIB.ActionClient({\n        ros: this.ros,\n        actionName: actionName,\n        serverName: serverName\n      });\n      this.cancelAssignmentService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/rtabmap/cancel_goal',\n        serviceType: 'std_srvs/Empty'\n      });\n      this.InsertStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/InsertStation',\n        serviceType: 'jarvis_web_server/InsertStation'\n      });\n      this.DeleteStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/DeleteStation',\n        serviceType: 'jarvis_web_server/DeleteStation'\n      });\n      this.GetStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/GetStation',\n        serviceType: 'jarvis_web_server/GetStation'\n      });\n      this.GetStationService.callService(null, res => {\n        // this.stationListLoad = res.stations;\n        this.setState({\n          stations: res.stations\n        });\n      });\n    }\n  }\n\n  onAddStation(newStation) {\n    if (newStation && newStation.name && newStation.pose && newStation.id && newStation.degrees && newStation.obj) {\n      var stationList = this.state.stations;\n      stationList.push(newStation);\n      this.setState({\n        stations: stationList\n      });\n      console.log(\"added new station\", newStation.name);\n      var request = new ROSLIB.ServiceRequest({\n        station: {\n          name: newStation.name,\n          pose: newStation.pose,\n          degrees: newStation.degrees,\n          id: newStation.id\n        }\n      });\n      this.InsertStationService.callService(request);\n    }\n  }\n\n  onClickStation(stationId) {\n    var targetIndex = -1;\n    this.state.stations.forEach((item, index) => {\n      if (item.id == stationId) {\n        targetIndex = index;\n      }\n    });\n\n    if (targetIndex >= 0) {\n      if (this.state.command == 'DeleteStation') {\n        console.log(\"remove station\", this.state.stations[targetIndex].name);\n        var request = new ROSLIB.ServiceRequest({\n          station: {\n            name: this.state.stations[targetIndex].name,\n            pose: this.state.stations[targetIndex].pose,\n            degrees: this.state.stations[targetIndex].degrees,\n            id: this.state.stations[targetIndex].id\n          }\n        });\n        this.DeleteStationService.callService(request);\n        var stationList = this.state.stations;\n        stationList.splice(targetIndex, 1);\n        this.setState({\n          stations: stationList\n        });\n      } else {\n        console.log(\"Go to station\", this.state.stations[targetIndex].name);\n        this.setState({\n          message: 'Robot is moving to station ' + this.state.stations[targetIndex].name,\n          enableCancel: true,\n          command: 'CancelGoal'\n        });\n        var goal = new ROSLIB.Goal({\n          actionClient: this.actionClient,\n          goalMessage: {\n            target_pose: {\n              header: {\n                frame_id: 'map'\n              },\n              pose: this.state.stations[targetIndex].pose\n            }\n          }\n        });\n        goal.send();\n      }\n    }\n  }\n\n  onSetGoal(obj, pose) {\n    console.log(\"added new goal\");\n    this.setState({\n      message: 'Robot is moving to Goal',\n      enableCancel: true\n    }); // /*\n\n    var goal = new ROSLIB.Goal({\n      actionClient: this.actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: 'map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send(); // */\n    // var sendGoal = new ROSLIB.Topic({\n    //   ros : this.ros,\n    //   name : '/move_base_simple/goal',\n    //   messageType : 'geometry_msgs/PoseStamped'\n    // });\n    // var message = new ROSLIB.Message({\n    //   header: {\n    //     stamp: Date.now(),\n    //     frame_id: \"map\",\n    //   },\n    //   pose: {\n    //     position: {\n    //       x: 3.01919054985,\n    //       y: 6.70290660858,\n    //       z: 0.0,\n    //     },\n    //     orientation: {\n    //       x: 0.0,\n    //       y: 0.0,\n    //       z: -0.493572111669,\n    //       w: 0.869704875566,\n    //     },\n    //   }\n    // });\n    // sendGoal.publish(message);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"box-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      border: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        fontSize: \"1.2rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 54\n      }\n    }, \"Map\")), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: \"map-container\",\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: \"map-controller\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"map-button\",\n      variant: \"danger\",\n      onClick: () => this.setState({\n        command: 'SetGoal',\n        message: 'Send goal to your robot'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }, \"Set Goal\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"map-button\",\n      variant: \"success\",\n      onClick: () => this.setState({\n        command: 'AddStation',\n        message: 'Add new station',\n        stationName: 'NoName'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, \"Add Station\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"map-button\",\n      variant: \"outline-success\",\n      onClick: () => this.setState({\n        command: 'DeleteStation',\n        message: 'Click to delete station'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, \"Delete Station\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"map-button\",\n      variant: \"warning\",\n      onClick: () => this.setState({\n        command: 'none',\n        message: 'Robot is ready !'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, \"Cancel\")), /*#__PURE__*/React.createElement(Container, {\n      style: {\n        width: \"28rem\",\n        height: \"4rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }, this.state.command == 'AddStation' && /*#__PURE__*/React.createElement(Form, {\n      onChange: event => this.setState({\n        stationName: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Row,\n      controlId: \"formHorizontalEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      column: true,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, \"Station:\"), /*#__PURE__*/React.createElement(Col, {\n      sm: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"ex: Table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 27\n      }\n    })))), this.state.command != 'AddStation' && /*#__PURE__*/React.createElement(Alert, {\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, this.state.message)), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      disabled: this.state.enableCancel ? false : true,\n      onClick: () => {\n        this.setState({\n          command: 'CancelGoal',\n          message: 'Assignment was canceled',\n          enableCancel: false\n        });\n        this.cancelAssignmentService.callService();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, \"Cancel Assignment\"))))));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/luong/kobuki_web/src/components/Map/Map.js"],"names":["React","Component","Container","Card","Button","Form","Col","Row","Alert","ROSLIB","Nav2d","Map","constructor","props","ros","state","command","message","stationName","enableCancel","stations","stationListLoad","onAddStation","bind","onClickStation","onSetGoal","actionClient","cancelAssignmentService","InsertStationService","DeleteStationService","GetStationService","componentDidMount","serverName","actionName","ActionClient","Service","name","serviceType","callService","res","setState","newStation","pose","id","degrees","obj","stationList","push","console","log","request","ServiceRequest","station","stationId","targetIndex","forEach","item","index","splice","goal","Goal","goalMessage","target_pose","header","frame_id","send","render","fontSize","width","height","event","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Container, Card, Button, Form, Col, Row, Alert } from \"react-bootstrap\";\nimport ROSLIB from \"roslib\";\n// import \"ros2d\";\nimport Nav2d from \"react-nav2djs\";\nimport \"./Map.css\";\nimport \"../CommonStyle.css\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.ros = props.ros || null;\n    this.state = {\n      command: 'none',\n      message: 'Robot is ready !',\n      stationName: 'NoName',\n      enableCancel: false,\n      stations: [],\n    }\n    this.stationListLoad = [];\n    this.onAddStation = this.onAddStation.bind(this);\n    this.onClickStation = this.onClickStation.bind(this);\n    this.onSetGoal = this.onSetGoal.bind(this);\n    this.actionClient = null;\n    this.cancelAssignmentService = null;\n    this.InsertStationService = null;\n    this.DeleteStationService = null;\n    this.GetStationService = null;\n  }\n\n  componentDidMount() {\n    if (this.props.ros != null) {\n      this.ros = this.props.ros;\n      var serverName = this.props.serverName || '/move_base';\n      var actionName = this.props.actionName || 'move_base_msgs/MoveBaseAction';\n      this.actionClient = new ROSLIB.ActionClient({\n        ros: this.ros,\n        actionName: actionName,\n        serverName: serverName\n      });\n      this.cancelAssignmentService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/rtabmap/cancel_goal',\n        serviceType: 'std_srvs/Empty'\n      });\n      this.InsertStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/InsertStation',\n        serviceType: 'jarvis_web_server/InsertStation',\n      });\n      this.DeleteStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/DeleteStation',\n        serviceType: 'jarvis_web_server/DeleteStation',\n      });\n      this.GetStationService = new ROSLIB.Service({\n        ros: this.ros,\n        name: '/GetStation',\n        serviceType: 'jarvis_web_server/GetStation',\n      });\n      this.GetStationService.callService(null,(res) => {\n        // this.stationListLoad = res.stations;\n        this.setState({stations: res.stations});\n      });\n    }\n  }\n\n  onAddStation(newStation) {\n    if (newStation && newStation.name && newStation.pose && newStation.id && newStation.degrees && newStation.obj) {\n      var stationList = this.state.stations;\n      stationList.push(newStation);\n      this.setState({stations: stationList});\n      console.log(\"added new station\", newStation.name);\n      var request = new ROSLIB.ServiceRequest({\n        station: {\n          name: newStation.name,\n          pose: newStation.pose,\n          degrees: newStation.degrees,\n          id: newStation.id,\n        },\n      });\n      this.InsertStationService.callService(request);\n    }\n  }\n\n  onClickStation(stationId) {\n    var targetIndex = -1;\n    this.state.stations.forEach((item, index) => {\n      if (item.id == stationId) {\n        targetIndex = index;\n      }\n    });\n    if (targetIndex >= 0) {\n      if (this.state.command == 'DeleteStation') {\n        console.log(\"remove station\", this.state.stations[targetIndex].name);\n        var request = new ROSLIB.ServiceRequest({\n          station: {\n            name: this.state.stations[targetIndex].name,\n            pose: this.state.stations[targetIndex].pose,\n            degrees: this.state.stations[targetIndex].degrees,\n            id: this.state.stations[targetIndex].id,\n          }\n        });\n        this.DeleteStationService.callService(request);\n        var stationList = this.state.stations;\n        stationList.splice(targetIndex, 1);\n        this.setState({stations: stationList});\n      } else {\n        console.log(\"Go to station\", this.state.stations[targetIndex].name);\n        this.setState({message: 'Robot is moving to station ' + this.state.stations[targetIndex].name, enableCancel: true, command: 'CancelGoal'});\n        var goal = new ROSLIB.Goal({\n          actionClient: this.actionClient,\n          goalMessage: {\n            target_pose: {\n              header: {\n                frame_id: 'map'\n              },\n              pose: this.state.stations[targetIndex].pose,\n            }\n          }\n        });\n        goal.send();\n      }\n    }\n  }\n\n  onSetGoal(obj, pose) {\n    console.log(\"added new goal\");\n    this.setState({message: 'Robot is moving to Goal', enableCancel: true});\n    // /*\n    var goal = new ROSLIB.Goal({\n      actionClient: this.actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: 'map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n    // */\n    // var sendGoal = new ROSLIB.Topic({\n    //   ros : this.ros,\n    //   name : '/move_base_simple/goal',\n    //   messageType : 'geometry_msgs/PoseStamped'\n    // });\n\n    // var message = new ROSLIB.Message({\n    //   header: {\n    //     stamp: Date.now(),\n    //     frame_id: \"map\",\n    //   },\n    //   pose: {\n    //     position: {\n    //       x: 3.01919054985,\n    //       y: 6.70290660858,\n    //       z: 0.0,\n    //     },\n    //     orientation: {\n    //       x: 0.0,\n    //       y: 0.0,\n    //       z: -0.493572111669,\n    //       w: 0.869704875566,\n    //     },\n    //   }\n    // });\n    // sendGoal.publish(message);\n  }\n\n  render() {\n    return (\n      <Container className=\"box-margin\">\n        <Card border=\"secondary\">\n          <Card.Header style={{fontSize: \"1.2rem\" }}><strong>Map</strong></Card.Header>\n          <Card.Body>\n            <Container className=\"map-container\" id=\"map\">\n              <Container className=\"map-controller\">\n                <Button className=\"map-button\" variant='danger' onClick={() => this.setState({ command: 'SetGoal', message: 'Send goal to your robot' })}>Set Goal</Button>\n                {/* <Button className=\"map-button\" variant='outline-danger' onClick={() => this.setState({command: 'CancelGoal'})}>Cancel Goal</Button> */}\n                <Button className=\"map-button\" variant='success' onClick={() => this.setState({ command: 'AddStation', message: 'Add new station', stationName: 'NoName' })}>Add Station</Button>\n                <Button className=\"map-button\" variant='outline-success' onClick={() => this.setState({ command: 'DeleteStation', message: 'Click to delete station' })}>Delete Station</Button>\n                <Button className=\"map-button\" variant='warning' onClick={() => this.setState({ command: 'none', message: 'Robot is ready !' })}>Cancel</Button>\n              </Container>\n                <Container style={{ width: \"28rem\", height: \"4rem\" }}>\n                  {this.state.command == 'AddStation' &&\n                    <Form onChange={(event) => this.setState({stationName: event.target.value})}>\n                      <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                        <Form.Label column sm={3}>\n                          Station:\n                        </Form.Label>\n                        <Col sm={8}>\n                          <Form.Control type=\"text\" placeholder=\"ex: Table\" />\n                        </Col>\n                      </Form.Group>\n                    </Form>\n                  }\n                  {this.state.command != 'AddStation' &&\n                    <Alert variant=\"info\">{this.state.message}</Alert>\n                  }\n                </Container>\n              {/* <Nav2d\n                id='random'\n                imageRobot={require('./jarvis.png')}\n                imageGoalArrow={require('./arrow-red.png')}\n                imageStationArrow={require('./arrow-green.png')}\n                width={720}\n                height={480}\n                ros={this.ros}\n                topic='/map'\n                topic_costmap='/move_base/global_costmap/costmap'\n                command={this.state.command}\n                onSetGoal={(obj, pose) => this.onSetGoal(obj, pose)}\n                onAddStation={(newStation) => this.onAddStation(newStation)}\n                onClickStation={(station) => this.onClickStation(station)}\n                stationName={this.state.stationName}\n                station={this.state.stations}\n              /> */}\n              <Container>\n                <Button\n                  variant=\"danger\"\n                  disabled={this.state.enableCancel ? false : true}\n                  onClick={() => {\n                    this.setState({command: 'CancelGoal', message: 'Assignment was canceled', enableCancel: false});\n                    this.cancelAssignmentService.callService();\n                  }}>\n                  Cancel Assignment\n                </Button>\n              </Container>\n            </Container>\n          </Card.Body>\n        </Card>\n      </Container>\n    )\n  }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}